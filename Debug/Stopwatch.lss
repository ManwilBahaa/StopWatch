
Stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000220a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000220a  0000229e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006e  0080006e  000022ac  2**0
                  ALLOC
  3 .stab         00001cd4  00000000  00000000  000022ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cd9  00000000  00000000  00003f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000087ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000894c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000093a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__vector_1>
       8:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__vector_2>
       c:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 37 10 	jmp	0x206e	; 0x206e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <main>
      8a:	0c 94 03 11 	jmp	0x2206	; 0x2206 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_u8_SET_PIN>:
#include "STD_TYPES.h"
#include "DIO.h"
#include "DIO_REGISTER.h"

u8 DIO_u8_SET_PIN(u8 Port , u8 Pin , u8 Direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_u8_SET_PIN+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_u8_SET_PIN+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <DIO_u8_SET_PIN+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8a 83       	std	Y+2, r24	; 0x02
     b56:	6b 83       	std	Y+3, r22	; 0x03
     b58:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_error_state ;

	if ((Port >= PORTA && Port <= PORTD) && (Pin >= PIN0 && Pin <= PIN7) && (Direction == INPUT || Direction == OUTPUT))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <DIO_u8_SET_PIN+0x1c>
     b60:	ee c0       	rjmp	.+476    	; 0xd3e <DIO_u8_SET_PIN+0x1f8>
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <DIO_u8_SET_PIN+0x24>
     b68:	ea c0       	rjmp	.+468    	; 0xd3e <DIO_u8_SET_PIN+0x1f8>
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	88 23       	and	r24, r24
     b6e:	21 f0       	breq	.+8      	; 0xb78 <DIO_u8_SET_PIN+0x32>
     b70:	8c 81       	ldd	r24, Y+4	; 0x04
     b72:	81 30       	cpi	r24, 0x01	; 1
     b74:	09 f0       	breq	.+2      	; 0xb78 <DIO_u8_SET_PIN+0x32>
     b76:	e3 c0       	rjmp	.+454    	; 0xd3e <DIO_u8_SET_PIN+0x1f8>
	{
		Local_u8_error_state = OK;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	89 83       	std	Y+1, r24	; 0x01
		switch(Port){
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	3e 83       	std	Y+6, r19	; 0x06
     b84:	2d 83       	std	Y+5, r18	; 0x05
     b86:	8d 81       	ldd	r24, Y+5	; 0x05
     b88:	9e 81       	ldd	r25, Y+6	; 0x06
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	91 05       	cpc	r25, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <DIO_u8_SET_PIN+0x4c>
     b90:	47 c0       	rjmp	.+142    	; 0xc20 <DIO_u8_SET_PIN+0xda>
     b92:	2d 81       	ldd	r18, Y+5	; 0x05
     b94:	3e 81       	ldd	r19, Y+6	; 0x06
     b96:	22 30       	cpi	r18, 0x02	; 2
     b98:	31 05       	cpc	r19, r1
     b9a:	2c f4       	brge	.+10     	; 0xba6 <DIO_u8_SET_PIN+0x60>
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	71 f0       	breq	.+28     	; 0xbc0 <DIO_u8_SET_PIN+0x7a>
     ba4:	cd c0       	rjmp	.+410    	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
     ba6:	2d 81       	ldd	r18, Y+5	; 0x05
     ba8:	3e 81       	ldd	r19, Y+6	; 0x06
     baa:	22 30       	cpi	r18, 0x02	; 2
     bac:	31 05       	cpc	r19, r1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <DIO_u8_SET_PIN+0x6c>
     bb0:	67 c0       	rjmp	.+206    	; 0xc80 <DIO_u8_SET_PIN+0x13a>
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	9e 81       	ldd	r25, Y+6	; 0x06
     bb6:	83 30       	cpi	r24, 0x03	; 3
     bb8:	91 05       	cpc	r25, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <DIO_u8_SET_PIN+0x78>
     bbc:	91 c0       	rjmp	.+290    	; 0xce0 <DIO_u8_SET_PIN+0x19a>
     bbe:	c0 c0       	rjmp	.+384    	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
		case PORTA:
			if(Direction == INPUT)
     bc0:	8c 81       	ldd	r24, Y+4	; 0x04
     bc2:	88 23       	and	r24, r24
     bc4:	a9 f4       	brne	.+42     	; 0xbf0 <DIO_u8_SET_PIN+0xaa>
				CLEAR_BIT(DDRA_REGISTER, Pin);
     bc6:	aa e3       	ldi	r26, 0x3A	; 58
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	ea e3       	ldi	r30, 0x3A	; 58
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	48 2f       	mov	r20, r24
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	02 2e       	mov	r0, r18
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <DIO_u8_SET_PIN+0x9e>
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	0a 94       	dec	r0
     be6:	e2 f7       	brpl	.-8      	; 0xbe0 <DIO_u8_SET_PIN+0x9a>
     be8:	80 95       	com	r24
     bea:	84 23       	and	r24, r20
     bec:	8c 93       	st	X, r24
     bee:	a8 c0       	rjmp	.+336    	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
			else if(Direction == OUTPUT)
     bf0:	8c 81       	ldd	r24, Y+4	; 0x04
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <DIO_u8_SET_PIN+0xb2>
     bf6:	a4 c0       	rjmp	.+328    	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
				SET_BIT(DDRA_REGISTER, Pin);
     bf8:	aa e3       	ldi	r26, 0x3A	; 58
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	ea e3       	ldi	r30, 0x3A	; 58
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	48 2f       	mov	r20, r24
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	02 2e       	mov	r0, r18
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <DIO_u8_SET_PIN+0xd0>
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	0a 94       	dec	r0
     c18:	e2 f7       	brpl	.-8      	; 0xc12 <DIO_u8_SET_PIN+0xcc>
     c1a:	84 2b       	or	r24, r20
     c1c:	8c 93       	st	X, r24
     c1e:	90 c0       	rjmp	.+288    	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
			break;

		case PORTB:
			if(Direction == INPUT)
     c20:	8c 81       	ldd	r24, Y+4	; 0x04
     c22:	88 23       	and	r24, r24
     c24:	a9 f4       	brne	.+42     	; 0xc50 <DIO_u8_SET_PIN+0x10a>
				CLEAR_BIT(DDRB_REGISTER, Pin);
     c26:	a7 e3       	ldi	r26, 0x37	; 55
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e7 e3       	ldi	r30, 0x37	; 55
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_u8_SET_PIN+0xfe>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_u8_SET_PIN+0xfa>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	78 c0       	rjmp	.+240    	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
			else if(Direction == OUTPUT)
     c50:	8c 81       	ldd	r24, Y+4	; 0x04
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	09 f0       	breq	.+2      	; 0xc58 <DIO_u8_SET_PIN+0x112>
     c56:	74 c0       	rjmp	.+232    	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
				SET_BIT(DDRB_REGISTER, Pin);
     c58:	a7 e3       	ldi	r26, 0x37	; 55
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e7 e3       	ldi	r30, 0x37	; 55
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	48 2f       	mov	r20, r24
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	02 2e       	mov	r0, r18
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <DIO_u8_SET_PIN+0x130>
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	0a 94       	dec	r0
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <DIO_u8_SET_PIN+0x12c>
     c7a:	84 2b       	or	r24, r20
     c7c:	8c 93       	st	X, r24
     c7e:	60 c0       	rjmp	.+192    	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
			break;

		case PORTC:
			if(Direction == INPUT)
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	88 23       	and	r24, r24
     c84:	a9 f4       	brne	.+42     	; 0xcb0 <DIO_u8_SET_PIN+0x16a>
				CLEAR_BIT(DDRC_REGISTER, Pin);
     c86:	a4 e3       	ldi	r26, 0x34	; 52
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e4 e3       	ldi	r30, 0x34	; 52
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_u8_SET_PIN+0x15e>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_u8_SET_PIN+0x15a>
     ca8:	80 95       	com	r24
     caa:	84 23       	and	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	48 c0       	rjmp	.+144    	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
			else if(Direction == OUTPUT)
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <DIO_u8_SET_PIN+0x172>
     cb6:	44 c0       	rjmp	.+136    	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
				SET_BIT(DDRC_REGISTER, Pin);
     cb8:	a4 e3       	ldi	r26, 0x34	; 52
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e4 e3       	ldi	r30, 0x34	; 52
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_u8_SET_PIN+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_u8_SET_PIN+0x18c>
     cda:	84 2b       	or	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	30 c0       	rjmp	.+96     	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
			break;

		case PORTD:
			if(Direction == INPUT)
     ce0:	8c 81       	ldd	r24, Y+4	; 0x04
     ce2:	88 23       	and	r24, r24
     ce4:	a9 f4       	brne	.+42     	; 0xd10 <DIO_u8_SET_PIN+0x1ca>
				CLEAR_BIT(DDRD_REGISTER, Pin);
     ce6:	a1 e3       	ldi	r26, 0x31	; 49
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e1 e3       	ldi	r30, 0x31	; 49
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_u8_SET_PIN+0x1be>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_u8_SET_PIN+0x1ba>
     d08:	80 95       	com	r24
     d0a:	84 23       	and	r24, r20
     d0c:	8c 93       	st	X, r24
     d0e:	18 c0       	rjmp	.+48     	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
			else if(Direction == OUTPUT)
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	a9 f4       	brne	.+42     	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
				SET_BIT(DDRD_REGISTER, Pin);
     d16:	a1 e3       	ldi	r26, 0x31	; 49
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e1 e3       	ldi	r30, 0x31	; 49
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DIO_u8_SET_PIN+0x1ee>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <DIO_u8_SET_PIN+0x1ea>
     d38:	84 2b       	or	r24, r20
     d3a:	8c 93       	st	X, r24
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <DIO_u8_SET_PIN+0x1fa>
			break;
		}
	}
	else{
		Local_u8_error_state = ERR;
     d3e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8_error_state;
     d40:	89 81       	ldd	r24, Y+1	; 0x01
}
     d42:	26 96       	adiw	r28, 0x06	; 6
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <DIO_u8_SET_PORT>:
u8 DIO_u8_SET_PORT(u8 Port , u8 Direction)
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	00 d0       	rcall	.+0      	; 0xd5a <DIO_u8_SET_PORT+0x6>
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <DIO_u8_SET_PORT+0x8>
     d5c:	0f 92       	push	r0
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	8a 83       	std	Y+2, r24	; 0x02
     d64:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_error_state = OK;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	89 83       	std	Y+1, r24	; 0x01
	if(Port > PORTD || Port < PORTA){
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	84 30       	cpi	r24, 0x04	; 4
     d6e:	10 f0       	brcs	.+4      	; 0xd74 <DIO_u8_SET_PORT+0x20>
		Local_u8_error_state = ERR;
     d70:	19 82       	std	Y+1, r1	; 0x01
     d72:	32 c0       	rjmp	.+100    	; 0xdd8 <DIO_u8_SET_PORT+0x84>
	}else{
		switch(Port)
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	3d 83       	std	Y+5, r19	; 0x05
     d7c:	2c 83       	std	Y+4, r18	; 0x04
     d7e:	8c 81       	ldd	r24, Y+4	; 0x04
     d80:	9d 81       	ldd	r25, Y+5	; 0x05
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	91 05       	cpc	r25, r1
     d86:	d1 f0       	breq	.+52     	; 0xdbc <DIO_u8_SET_PORT+0x68>
     d88:	2c 81       	ldd	r18, Y+4	; 0x04
     d8a:	3d 81       	ldd	r19, Y+5	; 0x05
     d8c:	22 30       	cpi	r18, 0x02	; 2
     d8e:	31 05       	cpc	r19, r1
     d90:	2c f4       	brge	.+10     	; 0xd9c <DIO_u8_SET_PORT+0x48>
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	9d 81       	ldd	r25, Y+5	; 0x05
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	61 f0       	breq	.+24     	; 0xdb2 <DIO_u8_SET_PORT+0x5e>
     d9a:	1e c0       	rjmp	.+60     	; 0xdd8 <DIO_u8_SET_PORT+0x84>
     d9c:	2c 81       	ldd	r18, Y+4	; 0x04
     d9e:	3d 81       	ldd	r19, Y+5	; 0x05
     da0:	22 30       	cpi	r18, 0x02	; 2
     da2:	31 05       	cpc	r19, r1
     da4:	81 f0       	breq	.+32     	; 0xdc6 <DIO_u8_SET_PORT+0x72>
     da6:	8c 81       	ldd	r24, Y+4	; 0x04
     da8:	9d 81       	ldd	r25, Y+5	; 0x05
     daa:	83 30       	cpi	r24, 0x03	; 3
     dac:	91 05       	cpc	r25, r1
     dae:	81 f0       	breq	.+32     	; 0xdd0 <DIO_u8_SET_PORT+0x7c>
     db0:	13 c0       	rjmp	.+38     	; 0xdd8 <DIO_u8_SET_PORT+0x84>
		{
		case PORTA:
			DDRA_REGISTER= Direction;
     db2:	ea e3       	ldi	r30, 0x3A	; 58
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	80 83       	st	Z, r24
     dba:	0e c0       	rjmp	.+28     	; 0xdd8 <DIO_u8_SET_PORT+0x84>
			break;
		case PORTB:
			DDRB_REGISTER= Direction;
     dbc:	e7 e3       	ldi	r30, 0x37	; 55
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	80 83       	st	Z, r24
     dc4:	09 c0       	rjmp	.+18     	; 0xdd8 <DIO_u8_SET_PORT+0x84>
			break;
		case PORTC:
			DDRC_REGISTER= Direction;
     dc6:	e4 e3       	ldi	r30, 0x34	; 52
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	80 83       	st	Z, r24
     dce:	04 c0       	rjmp	.+8      	; 0xdd8 <DIO_u8_SET_PORT+0x84>
			break;
		case PORTD:
			DDRD_REGISTER= Direction;
     dd0:	e1 e3       	ldi	r30, 0x31	; 49
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	80 83       	st	Z, r24
			break;
		}
	}
	return Local_u8_error_state;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01

}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <DIO_u8_WRITE_PIN>:

u8 DIO_u8_WRITE_PIN(u8 Port , u8 Pin , u8 Value)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <DIO_u8_WRITE_PIN+0x6>
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <DIO_u8_WRITE_PIN+0x8>
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <DIO_u8_WRITE_PIN+0xa>
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	8a 83       	std	Y+2, r24	; 0x02
     dfa:	6b 83       	std	Y+3, r22	; 0x03
     dfc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_error_state = OK;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	89 83       	std	Y+1, r24	; 0x01
	if(Port > PORTD || Port < PORTA || Pin > PIN7 || Pin < PIN0 || (Value != HIGH && Value != LOW)){
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	84 30       	cpi	r24, 0x04	; 4
     e06:	48 f4       	brcc	.+18     	; 0xe1a <DIO_u8_WRITE_PIN+0x30>
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	88 30       	cpi	r24, 0x08	; 8
     e0c:	30 f4       	brcc	.+12     	; 0xe1a <DIO_u8_WRITE_PIN+0x30>
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	29 f0       	breq	.+10     	; 0xe1e <DIO_u8_WRITE_PIN+0x34>
     e14:	8c 81       	ldd	r24, Y+4	; 0x04
     e16:	88 23       	and	r24, r24
     e18:	11 f0       	breq	.+4      	; 0xe1e <DIO_u8_WRITE_PIN+0x34>
		Local_u8_error_state = ERR;
     e1a:	19 82       	std	Y+1, r1	; 0x01
     e1c:	e0 c0       	rjmp	.+448    	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
	}
	else{

		switch(Port){
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	3e 83       	std	Y+6, r19	; 0x06
     e26:	2d 83       	std	Y+5, r18	; 0x05
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	91 05       	cpc	r25, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <DIO_u8_WRITE_PIN+0x4a>
     e32:	47 c0       	rjmp	.+142    	; 0xec2 <DIO_u8_WRITE_PIN+0xd8>
     e34:	2d 81       	ldd	r18, Y+5	; 0x05
     e36:	3e 81       	ldd	r19, Y+6	; 0x06
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	2c f4       	brge	.+10     	; 0xe48 <DIO_u8_WRITE_PIN+0x5e>
     e3e:	8d 81       	ldd	r24, Y+5	; 0x05
     e40:	9e 81       	ldd	r25, Y+6	; 0x06
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	71 f0       	breq	.+28     	; 0xe62 <DIO_u8_WRITE_PIN+0x78>
     e46:	cb c0       	rjmp	.+406    	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
     e48:	2d 81       	ldd	r18, Y+5	; 0x05
     e4a:	3e 81       	ldd	r19, Y+6	; 0x06
     e4c:	22 30       	cpi	r18, 0x02	; 2
     e4e:	31 05       	cpc	r19, r1
     e50:	09 f4       	brne	.+2      	; 0xe54 <DIO_u8_WRITE_PIN+0x6a>
     e52:	67 c0       	rjmp	.+206    	; 0xf22 <DIO_u8_WRITE_PIN+0x138>
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	9e 81       	ldd	r25, Y+6	; 0x06
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	91 05       	cpc	r25, r1
     e5c:	09 f4       	brne	.+2      	; 0xe60 <DIO_u8_WRITE_PIN+0x76>
     e5e:	91 c0       	rjmp	.+290    	; 0xf82 <DIO_u8_WRITE_PIN+0x198>
     e60:	be c0       	rjmp	.+380    	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
		case PORTA:
			if(Value == LOW)
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	88 23       	and	r24, r24
     e66:	a9 f4       	brne	.+42     	; 0xe92 <DIO_u8_WRITE_PIN+0xa8>
				CLEAR_BIT(PORTA_REGISTER, Pin);
     e68:	ab e3       	ldi	r26, 0x3B	; 59
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	eb e3       	ldi	r30, 0x3B	; 59
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_u8_WRITE_PIN+0x9c>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_u8_WRITE_PIN+0x98>
     e8a:	80 95       	com	r24
     e8c:	84 23       	and	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	a6 c0       	rjmp	.+332    	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
			else if(Value == HIGH)
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	09 f0       	breq	.+2      	; 0xe9a <DIO_u8_WRITE_PIN+0xb0>
     e98:	a2 c0       	rjmp	.+324    	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
				SET_BIT(PORTA_REGISTER, Pin);
     e9a:	ab e3       	ldi	r26, 0x3B	; 59
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	eb e3       	ldi	r30, 0x3B	; 59
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_u8_WRITE_PIN+0xce>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_u8_WRITE_PIN+0xca>
     ebc:	84 2b       	or	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	8e c0       	rjmp	.+284    	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
			break;

		case PORTB:
			if(Value == LOW)
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	88 23       	and	r24, r24
     ec6:	a9 f4       	brne	.+42     	; 0xef2 <DIO_u8_WRITE_PIN+0x108>
				CLEAR_BIT(PORTB_REGISTER, Pin);
     ec8:	a8 e3       	ldi	r26, 0x38	; 56
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e8 e3       	ldi	r30, 0x38	; 56
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_u8_WRITE_PIN+0xfc>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_u8_WRITE_PIN+0xf8>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	76 c0       	rjmp	.+236    	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
			else if(Value == HIGH)
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	09 f0       	breq	.+2      	; 0xefa <DIO_u8_WRITE_PIN+0x110>
     ef8:	72 c0       	rjmp	.+228    	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
				SET_BIT(PORTB_REGISTER, Pin);
     efa:	a8 e3       	ldi	r26, 0x38	; 56
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e8 e3       	ldi	r30, 0x38	; 56
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_u8_WRITE_PIN+0x12e>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_u8_WRITE_PIN+0x12a>
     f1c:	84 2b       	or	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	5e c0       	rjmp	.+188    	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
			break;

		case PORTC:
			if(Value == LOW)
     f22:	8c 81       	ldd	r24, Y+4	; 0x04
     f24:	88 23       	and	r24, r24
     f26:	a9 f4       	brne	.+42     	; 0xf52 <DIO_u8_WRITE_PIN+0x168>
				CLEAR_BIT(PORTC_REGISTER, Pin);
     f28:	a5 e3       	ldi	r26, 0x35	; 53
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e5 e3       	ldi	r30, 0x35	; 53
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_u8_WRITE_PIN+0x15c>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_u8_WRITE_PIN+0x158>
     f4a:	80 95       	com	r24
     f4c:	84 23       	and	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	46 c0       	rjmp	.+140    	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
			else if(Value == HIGH)
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	09 f0       	breq	.+2      	; 0xf5a <DIO_u8_WRITE_PIN+0x170>
     f58:	42 c0       	rjmp	.+132    	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
				SET_BIT(PORTC_REGISTER, Pin);
     f5a:	a5 e3       	ldi	r26, 0x35	; 53
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e5 e3       	ldi	r30, 0x35	; 53
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_u8_WRITE_PIN+0x18e>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_u8_WRITE_PIN+0x18a>
     f7c:	84 2b       	or	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	2e c0       	rjmp	.+92     	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
			break;

		case PORTD:
			if(Value == LOW)
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	88 23       	and	r24, r24
     f86:	a9 f4       	brne	.+42     	; 0xfb2 <DIO_u8_WRITE_PIN+0x1c8>
				CLEAR_BIT(PORTD_REGISTER, Pin);
     f88:	a2 e3       	ldi	r26, 0x32	; 50
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e2 e3       	ldi	r30, 0x32	; 50
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <DIO_u8_WRITE_PIN+0x1bc>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <DIO_u8_WRITE_PIN+0x1b8>
     faa:	80 95       	com	r24
     fac:	84 23       	and	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	16 c0       	rjmp	.+44     	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
			else if(Value == HIGH)
     fb2:	8c 81       	ldd	r24, Y+4	; 0x04
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	99 f4       	brne	.+38     	; 0xfde <DIO_u8_WRITE_PIN+0x1f4>
				SET_BIT(PORTD_REGISTER, Pin);
     fb8:	a2 e3       	ldi	r26, 0x32	; 50
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e2 e3       	ldi	r30, 0x32	; 50
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_u8_WRITE_PIN+0x1ec>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_u8_WRITE_PIN+0x1e8>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
			break;
		}
	}

	return Local_u8_error_state;
     fde:	89 81       	ldd	r24, Y+1	; 0x01

}
     fe0:	26 96       	adiw	r28, 0x06	; 6
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <DIO_u8_WRITE_PORT>:
u8 DIO_u8_WRITE_PORT(u8 Port , u8 Value)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <DIO_u8_WRITE_PORT+0x6>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <DIO_u8_WRITE_PORT+0x8>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	8a 83       	std	Y+2, r24	; 0x02
    1002:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_error_state = OK;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	89 83       	std	Y+1, r24	; 0x01
	if(Port > PORTD || Port < PORTA)
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	84 30       	cpi	r24, 0x04	; 4
    100c:	10 f0       	brcs	.+4      	; 0x1012 <DIO_u8_WRITE_PORT+0x20>
	{
		Local_u8_error_state = ERR;
    100e:	19 82       	std	Y+1, r1	; 0x01
    1010:	32 c0       	rjmp	.+100    	; 0x1076 <DIO_u8_WRITE_PORT+0x84>
	}else{
		switch(Port){
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	3d 83       	std	Y+5, r19	; 0x05
    101a:	2c 83       	std	Y+4, r18	; 0x04
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	9d 81       	ldd	r25, Y+5	; 0x05
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	91 05       	cpc	r25, r1
    1024:	d1 f0       	breq	.+52     	; 0x105a <DIO_u8_WRITE_PORT+0x68>
    1026:	2c 81       	ldd	r18, Y+4	; 0x04
    1028:	3d 81       	ldd	r19, Y+5	; 0x05
    102a:	22 30       	cpi	r18, 0x02	; 2
    102c:	31 05       	cpc	r19, r1
    102e:	2c f4       	brge	.+10     	; 0x103a <DIO_u8_WRITE_PORT+0x48>
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	9d 81       	ldd	r25, Y+5	; 0x05
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	61 f0       	breq	.+24     	; 0x1050 <DIO_u8_WRITE_PORT+0x5e>
    1038:	1e c0       	rjmp	.+60     	; 0x1076 <DIO_u8_WRITE_PORT+0x84>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	22 30       	cpi	r18, 0x02	; 2
    1040:	31 05       	cpc	r19, r1
    1042:	81 f0       	breq	.+32     	; 0x1064 <DIO_u8_WRITE_PORT+0x72>
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	83 30       	cpi	r24, 0x03	; 3
    104a:	91 05       	cpc	r25, r1
    104c:	81 f0       	breq	.+32     	; 0x106e <DIO_u8_WRITE_PORT+0x7c>
    104e:	13 c0       	rjmp	.+38     	; 0x1076 <DIO_u8_WRITE_PORT+0x84>
		case PORTA:
			PORTA_REGISTER=Value;
    1050:	eb e3       	ldi	r30, 0x3B	; 59
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	80 83       	st	Z, r24
    1058:	0e c0       	rjmp	.+28     	; 0x1076 <DIO_u8_WRITE_PORT+0x84>
			break;
		case PORTB:
			PORTB_REGISTER=Value;
    105a:	e8 e3       	ldi	r30, 0x38	; 56
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	80 83       	st	Z, r24
    1062:	09 c0       	rjmp	.+18     	; 0x1076 <DIO_u8_WRITE_PORT+0x84>
			break;
		case PORTC:
			PORTC_REGISTER=Value;
    1064:	e5 e3       	ldi	r30, 0x35	; 53
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	80 83       	st	Z, r24
    106c:	04 c0       	rjmp	.+8      	; 0x1076 <DIO_u8_WRITE_PORT+0x84>
			break;
		case PORTD:
			PORTD_REGISTER=Value;
    106e:	e2 e3       	ldi	r30, 0x32	; 50
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	80 83       	st	Z, r24
			break;
		}
	}
	return Local_u8_error_state;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <DIO_u8_READ_PORT>:

u8 DIO_u8_READ_PORT(u8 Port )
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <DIO_u8_READ_PORT+0x6>
    108e:	00 d0       	rcall	.+0      	; 0x1090 <DIO_u8_READ_PORT+0x8>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <DIO_u8_READ_PORT+0xa>
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	8b 83       	std	Y+3, r24	; 0x03
	if (Port >= PORTA && Port <= PORTD){
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	84 30       	cpi	r24, 0x04	; 4
    109c:	a8 f5       	brcc	.+106    	; 0x1108 <DIO_u8_READ_PORT+0x80>
		u8 Value;
		switch(Port){
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	3e 83       	std	Y+6, r19	; 0x06
    10a6:	2d 83       	std	Y+5, r18	; 0x05
    10a8:	8d 81       	ldd	r24, Y+5	; 0x05
    10aa:	9e 81       	ldd	r25, Y+6	; 0x06
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	91 05       	cpc	r25, r1
    10b0:	d1 f0       	breq	.+52     	; 0x10e6 <DIO_u8_READ_PORT+0x5e>
    10b2:	2d 81       	ldd	r18, Y+5	; 0x05
    10b4:	3e 81       	ldd	r19, Y+6	; 0x06
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <DIO_u8_READ_PORT+0x3e>
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	9e 81       	ldd	r25, Y+6	; 0x06
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	61 f0       	breq	.+24     	; 0x10dc <DIO_u8_READ_PORT+0x54>
    10c4:	1e c0       	rjmp	.+60     	; 0x1102 <DIO_u8_READ_PORT+0x7a>
    10c6:	2d 81       	ldd	r18, Y+5	; 0x05
    10c8:	3e 81       	ldd	r19, Y+6	; 0x06
    10ca:	22 30       	cpi	r18, 0x02	; 2
    10cc:	31 05       	cpc	r19, r1
    10ce:	81 f0       	breq	.+32     	; 0x10f0 <DIO_u8_READ_PORT+0x68>
    10d0:	8d 81       	ldd	r24, Y+5	; 0x05
    10d2:	9e 81       	ldd	r25, Y+6	; 0x06
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	91 05       	cpc	r25, r1
    10d8:	81 f0       	breq	.+32     	; 0x10fa <DIO_u8_READ_PORT+0x72>
    10da:	13 c0       	rjmp	.+38     	; 0x1102 <DIO_u8_READ_PORT+0x7a>
		case PORTA:
			Value = PINA_REGISTER;
    10dc:	e9 e3       	ldi	r30, 0x39	; 57
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8a 83       	std	Y+2, r24	; 0x02
    10e4:	0e c0       	rjmp	.+28     	; 0x1102 <DIO_u8_READ_PORT+0x7a>
			break;

		case PORTB:
			Value = PINB_REGISTER;
    10e6:	e6 e3       	ldi	r30, 0x36	; 54
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	8a 83       	std	Y+2, r24	; 0x02
    10ee:	09 c0       	rjmp	.+18     	; 0x1102 <DIO_u8_READ_PORT+0x7a>
			break;

		case PORTC:
			Value = PINC_REGISTER;
    10f0:	e3 e3       	ldi	r30, 0x33	; 51
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	8a 83       	std	Y+2, r24	; 0x02
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <DIO_u8_READ_PORT+0x7a>
			break;

		case PORTD:
			Value = PIND_REGISTER;
    10fa:	e0 e3       	ldi	r30, 0x30	; 48
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
		return Value;
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	9c 83       	std	Y+4, r25	; 0x04
    1106:	03 c0       	rjmp	.+6      	; 0x110e <DIO_u8_READ_PORT+0x86>
	}else{
		u8 Local_u8_error_state=ERR;
    1108:	19 82       	std	Y+1, r1	; 0x01
		return Local_u8_error_state;
    110a:	29 81       	ldd	r18, Y+1	; 0x01
    110c:	2c 83       	std	Y+4, r18	; 0x04
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    1110:	26 96       	adiw	r28, 0x06	; 6
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <DIO_u8_READ_PIN>:
u8 DIO_u8_READ_PIN(u8 Port , u8 Pin)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	27 97       	sbiw	r28, 0x07	; 7
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	8b 83       	std	Y+3, r24	; 0x03
    1138:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8_error_state =OK;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	8a 83       	std	Y+2, r24	; 0x02

	if ((Port >= PORTA && Port <= PORTD) && (Pin >= PIN0 && Pin <= PIN7))
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	84 30       	cpi	r24, 0x04	; 4
    1142:	08 f0       	brcs	.+2      	; 0x1146 <DIO_u8_READ_PIN+0x24>
    1144:	70 c0       	rjmp	.+224    	; 0x1226 <DIO_u8_READ_PIN+0x104>
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	88 30       	cpi	r24, 0x08	; 8
    114a:	08 f0       	brcs	.+2      	; 0x114e <DIO_u8_READ_PIN+0x2c>
    114c:	6c c0       	rjmp	.+216    	; 0x1226 <DIO_u8_READ_PIN+0x104>
	{
		Local_u8_error_state = OK;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	8a 83       	std	Y+2, r24	; 0x02
		u8 Value;
		switch(Port){
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	3f 83       	std	Y+7, r19	; 0x07
    115a:	2e 83       	std	Y+6, r18	; 0x06
    115c:	4e 81       	ldd	r20, Y+6	; 0x06
    115e:	5f 81       	ldd	r21, Y+7	; 0x07
    1160:	41 30       	cpi	r20, 0x01	; 1
    1162:	51 05       	cpc	r21, r1
    1164:	41 f1       	breq	.+80     	; 0x11b6 <DIO_u8_READ_PIN+0x94>
    1166:	8e 81       	ldd	r24, Y+6	; 0x06
    1168:	9f 81       	ldd	r25, Y+7	; 0x07
    116a:	82 30       	cpi	r24, 0x02	; 2
    116c:	91 05       	cpc	r25, r1
    116e:	34 f4       	brge	.+12     	; 0x117c <DIO_u8_READ_PIN+0x5a>
    1170:	2e 81       	ldd	r18, Y+6	; 0x06
    1172:	3f 81       	ldd	r19, Y+7	; 0x07
    1174:	21 15       	cp	r18, r1
    1176:	31 05       	cpc	r19, r1
    1178:	61 f0       	breq	.+24     	; 0x1192 <DIO_u8_READ_PIN+0x70>
    117a:	52 c0       	rjmp	.+164    	; 0x1220 <DIO_u8_READ_PIN+0xfe>
    117c:	4e 81       	ldd	r20, Y+6	; 0x06
    117e:	5f 81       	ldd	r21, Y+7	; 0x07
    1180:	42 30       	cpi	r20, 0x02	; 2
    1182:	51 05       	cpc	r21, r1
    1184:	51 f1       	breq	.+84     	; 0x11da <DIO_u8_READ_PIN+0xb8>
    1186:	8e 81       	ldd	r24, Y+6	; 0x06
    1188:	9f 81       	ldd	r25, Y+7	; 0x07
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	b9 f1       	breq	.+110    	; 0x11fe <DIO_u8_READ_PIN+0xdc>
    1190:	47 c0       	rjmp	.+142    	; 0x1220 <DIO_u8_READ_PIN+0xfe>
		case PORTA:
			Value= GET_BIT(PINA_REGISTER,Pin);
    1192:	e9 e3       	ldi	r30, 0x39	; 57
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_u8_READ_PIN+0x88>
    11a6:	55 95       	asr	r21
    11a8:	47 95       	ror	r20
    11aa:	8a 95       	dec	r24
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_u8_READ_PIN+0x84>
    11ae:	ca 01       	movw	r24, r20
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	35 c0       	rjmp	.+106    	; 0x1220 <DIO_u8_READ_PIN+0xfe>
			break;

		case PORTB:
			Value= GET_BIT(PINB_REGISTER,Pin);
    11b6:	e6 e3       	ldi	r30, 0x36	; 54
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_u8_READ_PIN+0xac>
    11ca:	55 95       	asr	r21
    11cc:	47 95       	ror	r20
    11ce:	8a 95       	dec	r24
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_u8_READ_PIN+0xa8>
    11d2:	ca 01       	movw	r24, r20
    11d4:	81 70       	andi	r24, 0x01	; 1
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	23 c0       	rjmp	.+70     	; 0x1220 <DIO_u8_READ_PIN+0xfe>
			break;

		case PORTC:
			Value= GET_BIT(PINC_REGISTER,Pin);
    11da:	e3 e3       	ldi	r30, 0x33	; 51
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a9 01       	movw	r20, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_u8_READ_PIN+0xd0>
    11ee:	55 95       	asr	r21
    11f0:	47 95       	ror	r20
    11f2:	8a 95       	dec	r24
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_u8_READ_PIN+0xcc>
    11f6:	ca 01       	movw	r24, r20
    11f8:	81 70       	andi	r24, 0x01	; 1
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	11 c0       	rjmp	.+34     	; 0x1220 <DIO_u8_READ_PIN+0xfe>
			break;

		case PORTD:
			Value= GET_BIT(PIND_REGISTER,Pin);
    11fe:	e0 e3       	ldi	r30, 0x30	; 48
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a9 01       	movw	r20, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_u8_READ_PIN+0xf4>
    1212:	55 95       	asr	r21
    1214:	47 95       	ror	r20
    1216:	8a 95       	dec	r24
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_u8_READ_PIN+0xf0>
    121a:	ca 01       	movw	r24, r20
    121c:	81 70       	andi	r24, 0x01	; 1
    121e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		return Value;
    1220:	59 81       	ldd	r21, Y+1	; 0x01
    1222:	5d 83       	std	Y+5, r21	; 0x05
    1224:	03 c0       	rjmp	.+6      	; 0x122c <DIO_u8_READ_PIN+0x10a>

	}else{
		Local_u8_error_state=ERR;
    1226:	1a 82       	std	Y+2, r1	; 0x02
		return Local_u8_error_state;
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	8d 83       	std	Y+5, r24	; 0x05
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    122e:	27 96       	adiw	r28, 0x07	; 7
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <INTERRUPT_GIE_ENABLE>:
#include "BIT_MATH.h"

// MCUCR & MCUCSR - controls the type of trigger - rising edge , falling edge etc...

void INTERRUPT_GIE_ENABLE()
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1248:	af e5       	ldi	r26, 0x5F	; 95
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ef e5       	ldi	r30, 0x5F	; 95
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 68       	ori	r24, 0x80	; 128
    1254:	8c 93       	st	X, r24
}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <INTERRUPT_GIE_DISABLE>:

void  INTERRUPT_GIE_DISABLE()
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
    1264:	af e5       	ldi	r26, 0x5F	; 95
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	ef e5       	ldi	r30, 0x5F	; 95
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8f 77       	andi	r24, 0x7F	; 127
    1270:	8c 93       	st	X, r24
}
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <INTERRUPT_INIT>:

void INTERRUPT_INIT(u8 INTERRUPT_PIN_X , u8 MOOD_X)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	2a 97       	sbiw	r28, 0x0a	; 10
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	6a 83       	std	Y+2, r22	; 0x02
	switch(INTERRUPT_PIN_X){
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3a 87       	std	Y+10, r19	; 0x0a
    1298:	29 87       	std	Y+9, r18	; 0x09
    129a:	89 85       	ldd	r24, Y+9	; 0x09
    129c:	9a 85       	ldd	r25, Y+10	; 0x0a
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <INTERRUPT_INIT+0x2e>
    12a4:	52 c0       	rjmp	.+164    	; 0x134a <INTERRUPT_INIT+0xd2>
    12a6:	29 85       	ldd	r18, Y+9	; 0x09
    12a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    12aa:	22 30       	cpi	r18, 0x02	; 2
    12ac:	31 05       	cpc	r19, r1
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <INTERRUPT_INIT+0x3a>
    12b0:	93 c0       	rjmp	.+294    	; 0x13d8 <INTERRUPT_INIT+0x160>
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	09 f0       	breq	.+2      	; 0x12bc <INTERRUPT_INIT+0x44>
    12ba:	b3 c0       	rjmp	.+358    	; 0x1422 <INTERRUPT_INIT+0x1aa>

	case INTERRUPT_PIN_0:
		switch(MOOD_X){
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	38 87       	std	Y+8, r19	; 0x08
    12c4:	2f 83       	std	Y+7, r18	; 0x07
    12c6:	8f 81       	ldd	r24, Y+7	; 0x07
    12c8:	98 85       	ldd	r25, Y+8	; 0x08
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	c1 f0       	breq	.+48     	; 0x1300 <INTERRUPT_INIT+0x88>
    12d0:	2f 81       	ldd	r18, Y+7	; 0x07
    12d2:	38 85       	ldd	r19, Y+8	; 0x08
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	11 f1       	breq	.+68     	; 0x131e <INTERRUPT_INIT+0xa6>
    12da:	8f 81       	ldd	r24, Y+7	; 0x07
    12dc:	98 85       	ldd	r25, Y+8	; 0x08
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	61 f5       	brne	.+88     	; 0x133a <INTERRUPT_INIT+0xc2>
		case MOOD_FALL:
			// set sense control for Int0 to falling edge
			SET_BIT(MCUCR , ISC01);
    12e2:	a5 e5       	ldi	r26, 0x55	; 85
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e5 e5       	ldi	r30, 0x55	; 85
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	82 60       	ori	r24, 0x02	; 2
    12ee:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR , ISC00);
    12f0:	a5 e5       	ldi	r26, 0x55	; 85
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e5 e5       	ldi	r30, 0x55	; 85
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8e 7f       	andi	r24, 0xFE	; 254
    12fc:	8c 93       	st	X, r24
    12fe:	1d c0       	rjmp	.+58     	; 0x133a <INTERRUPT_INIT+0xc2>
			break;
		case MOOD_RISE:
			// set sense control for Int0 to Rising edge
			SET_BIT(MCUCR , ISC01);
    1300:	a5 e5       	ldi	r26, 0x55	; 85
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e5 e5       	ldi	r30, 0x55	; 85
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	82 60       	ori	r24, 0x02	; 2
    130c:	8c 93       	st	X, r24
			SET_BIT(MCUCR , ISC00);
    130e:	a5 e5       	ldi	r26, 0x55	; 85
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e5 e5       	ldi	r30, 0x55	; 85
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	81 60       	ori	r24, 0x01	; 1
    131a:	8c 93       	st	X, r24
    131c:	0e c0       	rjmp	.+28     	; 0x133a <INTERRUPT_INIT+0xc2>
			break;
		case MOOD_LOGIC:
			// set sense control for Int0 to Logical Change
			CLEAR_BIT(MCUCR , ISC01);
    131e:	a5 e5       	ldi	r26, 0x55	; 85
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e5       	ldi	r30, 0x55	; 85
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	8d 7f       	andi	r24, 0xFD	; 253
    132a:	8c 93       	st	X, r24
			SET_BIT(MCUCR , ISC00);
    132c:	a5 e5       	ldi	r26, 0x55	; 85
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e5 e5       	ldi	r30, 0x55	; 85
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	81 60       	ori	r24, 0x01	; 1
    1338:	8c 93       	st	X, r24
			break;
		}
		SET_BIT(GICR, GICR_INT0);
    133a:	ab e5       	ldi	r26, 0x5B	; 91
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	eb e5       	ldi	r30, 0x5B	; 91
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	80 64       	ori	r24, 0x40	; 64
    1346:	8c 93       	st	X, r24
    1348:	6c c0       	rjmp	.+216    	; 0x1422 <INTERRUPT_INIT+0x1aa>
		break;

		case INTERRUPT_PIN_1:
			switch(MOOD_X){
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3e 83       	std	Y+6, r19	; 0x06
    1352:	2d 83       	std	Y+5, r18	; 0x05
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	c1 f0       	breq	.+48     	; 0x138e <INTERRUPT_INIT+0x116>
    135e:	2d 81       	ldd	r18, Y+5	; 0x05
    1360:	3e 81       	ldd	r19, Y+6	; 0x06
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	11 f1       	breq	.+68     	; 0x13ac <INTERRUPT_INIT+0x134>
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	61 f5       	brne	.+88     	; 0x13c8 <INTERRUPT_INIT+0x150>
			case MOOD_FALL:
				// set sense control for Int0 to falling edge
				SET_BIT(MCUCR , ISC11);
    1370:	a5 e5       	ldi	r26, 0x55	; 85
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e5 e5       	ldi	r30, 0x55	; 85
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	88 60       	ori	r24, 0x08	; 8
    137c:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR , ISC10);
    137e:	a5 e5       	ldi	r26, 0x55	; 85
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e5 e5       	ldi	r30, 0x55	; 85
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	8b 7f       	andi	r24, 0xFB	; 251
    138a:	8c 93       	st	X, r24
    138c:	1d c0       	rjmp	.+58     	; 0x13c8 <INTERRUPT_INIT+0x150>
				break;
			case MOOD_RISE:
				// set sense control for Int0 to Rising edge
				SET_BIT(MCUCR , ISC11);
    138e:	a5 e5       	ldi	r26, 0x55	; 85
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e5 e5       	ldi	r30, 0x55	; 85
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	88 60       	ori	r24, 0x08	; 8
    139a:	8c 93       	st	X, r24
				SET_BIT(MCUCR , ISC10);
    139c:	a5 e5       	ldi	r26, 0x55	; 85
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e5 e5       	ldi	r30, 0x55	; 85
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	84 60       	ori	r24, 0x04	; 4
    13a8:	8c 93       	st	X, r24
    13aa:	0e c0       	rjmp	.+28     	; 0x13c8 <INTERRUPT_INIT+0x150>
				break;
			case MOOD_LOGIC:
				// set sense control for Int0 to Logical Change
				CLEAR_BIT(MCUCR , ISC11);
    13ac:	a5 e5       	ldi	r26, 0x55	; 85
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e5       	ldi	r30, 0x55	; 85
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	87 7f       	andi	r24, 0xF7	; 247
    13b8:	8c 93       	st	X, r24
				SET_BIT(MCUCR , ISC10);
    13ba:	a5 e5       	ldi	r26, 0x55	; 85
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e5 e5       	ldi	r30, 0x55	; 85
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	84 60       	ori	r24, 0x04	; 4
    13c6:	8c 93       	st	X, r24
				break;
			}
			SET_BIT(GICR, GICR_INT1);
    13c8:	ab e5       	ldi	r26, 0x5B	; 91
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	eb e5       	ldi	r30, 0x5B	; 91
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	80 68       	ori	r24, 0x80	; 128
    13d4:	8c 93       	st	X, r24
    13d6:	25 c0       	rjmp	.+74     	; 0x1422 <INTERRUPT_INIT+0x1aa>
			break;

			case INTERRUPT_PIN_2:
				switch(MOOD_X){
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	3c 83       	std	Y+4, r19	; 0x04
    13e0:	2b 83       	std	Y+3, r18	; 0x03
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	31 f0       	breq	.+12     	; 0x13f6 <INTERRUPT_INIT+0x17e>
    13ea:	2b 81       	ldd	r18, Y+3	; 0x03
    13ec:	3c 81       	ldd	r19, Y+4	; 0x04
    13ee:	21 30       	cpi	r18, 0x01	; 1
    13f0:	31 05       	cpc	r19, r1
    13f2:	49 f0       	breq	.+18     	; 0x1406 <INTERRUPT_INIT+0x18e>
    13f4:	0f c0       	rjmp	.+30     	; 0x1414 <INTERRUPT_INIT+0x19c>
				case MOOD_FALL:
					CLEAR_BIT(MCUCSR,ISC2);
    13f6:	a4 e5       	ldi	r26, 0x54	; 84
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e4 e5       	ldi	r30, 0x54	; 84
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 7b       	andi	r24, 0xBF	; 191
    1402:	8c 93       	st	X, r24
    1404:	07 c0       	rjmp	.+14     	; 0x1414 <INTERRUPT_INIT+0x19c>
					break;
				case MOOD_RISE:
					SET_BIT(MCUCSR,ISC2);
    1406:	a4 e5       	ldi	r26, 0x54	; 84
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e4 e5       	ldi	r30, 0x54	; 84
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	80 64       	ori	r24, 0x40	; 64
    1412:	8c 93       	st	X, r24
					break;
				}
				SET_BIT(GICR, GICR_INT2);
    1414:	ab e5       	ldi	r26, 0x5B	; 91
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	eb e5       	ldi	r30, 0x5B	; 91
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	80 62       	ori	r24, 0x20	; 32
    1420:	8c 93       	st	X, r24
				break;
	}
}
    1422:	2a 96       	adiw	r28, 0x0a	; 10
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <intToString>:
#include "STD_TYPES.h"
#include "LCD.h"
#include "avr/delay.h"


void intToString(int num, char str[]) {
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	2b 97       	sbiw	r28, 0x0b	; 11
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	99 87       	std	Y+9, r25	; 0x09
    144a:	88 87       	std	Y+8, r24	; 0x08
    144c:	7b 87       	std	Y+11, r23	; 0x0b
    144e:	6a 87       	std	Y+10, r22	; 0x0a
	int index = 0;
    1450:	1f 82       	std	Y+7, r1	; 0x07
    1452:	1e 82       	std	Y+6, r1	; 0x06

	if (num == 0) {
    1454:	88 85       	ldd	r24, Y+8	; 0x08
    1456:	99 85       	ldd	r25, Y+9	; 0x09
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	71 f5       	brne	.+92     	; 0x14b8 <intToString+0x84>
		str[index++] = '0';
    145c:	2e 81       	ldd	r18, Y+6	; 0x06
    145e:	3f 81       	ldd	r19, Y+7	; 0x07
    1460:	8a 85       	ldd	r24, Y+10	; 0x0a
    1462:	9b 85       	ldd	r25, Y+11	; 0x0b
    1464:	fc 01       	movw	r30, r24
    1466:	e2 0f       	add	r30, r18
    1468:	f3 1f       	adc	r31, r19
    146a:	80 e3       	ldi	r24, 0x30	; 48
    146c:	80 83       	st	Z, r24
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	9f 81       	ldd	r25, Y+7	; 0x07
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	9f 83       	std	Y+7, r25	; 0x07
    1476:	8e 83       	std	Y+6, r24	; 0x06
    1478:	24 c0       	rjmp	.+72     	; 0x14c2 <intToString+0x8e>
	} else {
		while (num > 0) {
			str[index++] = num % 10 + '0';
    147a:	2e 81       	ldd	r18, Y+6	; 0x06
    147c:	3f 81       	ldd	r19, Y+7	; 0x07
    147e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1480:	9b 85       	ldd	r25, Y+11	; 0x0b
    1482:	fc 01       	movw	r30, r24
    1484:	e2 0f       	add	r30, r18
    1486:	f3 1f       	adc	r31, r19
    1488:	88 85       	ldd	r24, Y+8	; 0x08
    148a:	99 85       	ldd	r25, Y+9	; 0x09
    148c:	2a e0       	ldi	r18, 0x0A	; 10
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	b9 01       	movw	r22, r18
    1492:	0e 94 a5 10 	call	0x214a	; 0x214a <__divmodhi4>
    1496:	80 5d       	subi	r24, 0xD0	; 208
    1498:	80 83       	st	Z, r24
    149a:	8e 81       	ldd	r24, Y+6	; 0x06
    149c:	9f 81       	ldd	r25, Y+7	; 0x07
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	9f 83       	std	Y+7, r25	; 0x07
    14a2:	8e 83       	std	Y+6, r24	; 0x06
			num /= 10;
    14a4:	88 85       	ldd	r24, Y+8	; 0x08
    14a6:	99 85       	ldd	r25, Y+9	; 0x09
    14a8:	2a e0       	ldi	r18, 0x0A	; 10
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	b9 01       	movw	r22, r18
    14ae:	0e 94 a5 10 	call	0x214a	; 0x214a <__divmodhi4>
    14b2:	cb 01       	movw	r24, r22
    14b4:	99 87       	std	Y+9, r25	; 0x09
    14b6:	88 87       	std	Y+8, r24	; 0x08
	int index = 0;

	if (num == 0) {
		str[index++] = '0';
	} else {
		while (num > 0) {
    14b8:	88 85       	ldd	r24, Y+8	; 0x08
    14ba:	99 85       	ldd	r25, Y+9	; 0x09
    14bc:	18 16       	cp	r1, r24
    14be:	19 06       	cpc	r1, r25
    14c0:	e4 f2       	brlt	.-72     	; 0x147a <intToString+0x46>
			str[index++] = num % 10 + '0';
			num /= 10;
		}
	}

	str[index] = '\0';
    14c2:	2e 81       	ldd	r18, Y+6	; 0x06
    14c4:	3f 81       	ldd	r19, Y+7	; 0x07
    14c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    14c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    14ca:	fc 01       	movw	r30, r24
    14cc:	e2 0f       	add	r30, r18
    14ce:	f3 1f       	adc	r31, r19
    14d0:	10 82       	st	Z, r1

	// Reverse the string
	for (int i = 0, j = index - 1; i < j; i++, j--) {
    14d2:	1d 82       	std	Y+5, r1	; 0x05
    14d4:	1c 82       	std	Y+4, r1	; 0x04
    14d6:	8e 81       	ldd	r24, Y+6	; 0x06
    14d8:	9f 81       	ldd	r25, Y+7	; 0x07
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	9b 83       	std	Y+3, r25	; 0x03
    14de:	8a 83       	std	Y+2, r24	; 0x02
    14e0:	2c c0       	rjmp	.+88     	; 0x153a <intToString+0x106>
		char temp = str[i];
    14e2:	2c 81       	ldd	r18, Y+4	; 0x04
    14e4:	3d 81       	ldd	r19, Y+5	; 0x05
    14e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    14e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    14ea:	fc 01       	movw	r30, r24
    14ec:	e2 0f       	add	r30, r18
    14ee:	f3 1f       	adc	r31, r19
    14f0:	80 81       	ld	r24, Z
    14f2:	89 83       	std	Y+1, r24	; 0x01
		str[i] = str[j];
    14f4:	2c 81       	ldd	r18, Y+4	; 0x04
    14f6:	3d 81       	ldd	r19, Y+5	; 0x05
    14f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    14fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    14fc:	dc 01       	movw	r26, r24
    14fe:	a2 0f       	add	r26, r18
    1500:	b3 1f       	adc	r27, r19
    1502:	2a 81       	ldd	r18, Y+2	; 0x02
    1504:	3b 81       	ldd	r19, Y+3	; 0x03
    1506:	8a 85       	ldd	r24, Y+10	; 0x0a
    1508:	9b 85       	ldd	r25, Y+11	; 0x0b
    150a:	fc 01       	movw	r30, r24
    150c:	e2 0f       	add	r30, r18
    150e:	f3 1f       	adc	r31, r19
    1510:	80 81       	ld	r24, Z
    1512:	8c 93       	st	X, r24
		str[j] = temp;
    1514:	2a 81       	ldd	r18, Y+2	; 0x02
    1516:	3b 81       	ldd	r19, Y+3	; 0x03
    1518:	8a 85       	ldd	r24, Y+10	; 0x0a
    151a:	9b 85       	ldd	r25, Y+11	; 0x0b
    151c:	fc 01       	movw	r30, r24
    151e:	e2 0f       	add	r30, r18
    1520:	f3 1f       	adc	r31, r19
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	80 83       	st	Z, r24
	}

	str[index] = '\0';

	// Reverse the string
	for (int i = 0, j = index - 1; i < j; i++, j--) {
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	9d 83       	std	Y+5, r25	; 0x05
    152e:	8c 83       	std	Y+4, r24	; 0x04
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	9b 81       	ldd	r25, Y+3	; 0x03
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	9b 83       	std	Y+3, r25	; 0x03
    1538:	8a 83       	std	Y+2, r24	; 0x02
    153a:	2c 81       	ldd	r18, Y+4	; 0x04
    153c:	3d 81       	ldd	r19, Y+5	; 0x05
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	9b 81       	ldd	r25, Y+3	; 0x03
    1542:	28 17       	cp	r18, r24
    1544:	39 07       	cpc	r19, r25
    1546:	6c f2       	brlt	.-102    	; 0x14e2 <intToString+0xae>
		char temp = str[i];
		str[i] = str[j];
		str[j] = temp;
	}
}
    1548:	2b 96       	adiw	r28, 0x0b	; 11
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(u8 Data)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	2f 97       	sbiw	r28, 0x0f	; 15
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8_WRITE_PIN(CONTROL_PORT, RS , 0);
    1570:	82 e0       	ldi	r24, 0x02	; 2
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8_WRITE_PIN>
	DIO_u8_WRITE_PIN(CONTROL_PORT, RW , 0);
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	61 e0       	ldi	r22, 0x01	; 1
    157e:	40 e0       	ldi	r20, 0x00	; 0
    1580:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8_WRITE_PIN>

	DIO_u8_WRITE_PORT(DATA_PORT, Data);
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	6f 85       	ldd	r22, Y+15	; 0x0f
    1588:	0e 94 f9 07 	call	0xff2	; 0xff2 <DIO_u8_WRITE_PORT>


	DIO_u8_WRITE_PIN(CONTROL_PORT, E , 1);
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	62 e0       	ldi	r22, 0x02	; 2
    1590:	41 e0       	ldi	r20, 0x01	; 1
    1592:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8_WRITE_PIN>
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	a0 e8       	ldi	r26, 0x80	; 128
    159c:	bf e3       	ldi	r27, 0x3F	; 63
    159e:	8b 87       	std	Y+11, r24	; 0x0b
    15a0:	9c 87       	std	Y+12, r25	; 0x0c
    15a2:	ad 87       	std	Y+13, r26	; 0x0d
    15a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	4a ef       	ldi	r20, 0xFA	; 250
    15b4:	54 e4       	ldi	r21, 0x44	; 68
    15b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	8f 83       	std	Y+7, r24	; 0x07
    15c0:	98 87       	std	Y+8, r25	; 0x08
    15c2:	a9 87       	std	Y+9, r26	; 0x09
    15c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15c6:	6f 81       	ldd	r22, Y+7	; 0x07
    15c8:	78 85       	ldd	r23, Y+8	; 0x08
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e8       	ldi	r20, 0x80	; 128
    15d4:	5f e3       	ldi	r21, 0x3F	; 63
    15d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15da:	88 23       	and	r24, r24
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <LCD_WRITE_COMMAND+0x8e>
		__ticks = 1;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9e 83       	std	Y+6, r25	; 0x06
    15e4:	8d 83       	std	Y+5, r24	; 0x05
    15e6:	3f c0       	rjmp	.+126    	; 0x1666 <LCD_WRITE_COMMAND+0x10c>
	else if (__tmp > 65535)
    15e8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ea:	78 85       	ldd	r23, Y+8	; 0x08
    15ec:	89 85       	ldd	r24, Y+9	; 0x09
    15ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	3f ef       	ldi	r19, 0xFF	; 255
    15f4:	4f e7       	ldi	r20, 0x7F	; 127
    15f6:	57 e4       	ldi	r21, 0x47	; 71
    15f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15fc:	18 16       	cp	r1, r24
    15fe:	4c f5       	brge	.+82     	; 0x1652 <LCD_WRITE_COMMAND+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1600:	6b 85       	ldd	r22, Y+11	; 0x0b
    1602:	7c 85       	ldd	r23, Y+12	; 0x0c
    1604:	8d 85       	ldd	r24, Y+13	; 0x0d
    1606:	9e 85       	ldd	r25, Y+14	; 0x0e
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e2       	ldi	r20, 0x20	; 32
    160e:	51 e4       	ldi	r21, 0x41	; 65
    1610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	bc 01       	movw	r22, r24
    161a:	cd 01       	movw	r24, r26
    161c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9e 83       	std	Y+6, r25	; 0x06
    1626:	8d 83       	std	Y+5, r24	; 0x05
    1628:	0f c0       	rjmp	.+30     	; 0x1648 <LCD_WRITE_COMMAND+0xee>
    162a:	88 ec       	ldi	r24, 0xC8	; 200
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9c 83       	std	Y+4, r25	; 0x04
    1630:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <LCD_WRITE_COMMAND+0xdc>
    163a:	9c 83       	std	Y+4, r25	; 0x04
    163c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	69 f7       	brne	.-38     	; 0x162a <LCD_WRITE_COMMAND+0xd0>
    1650:	14 c0       	rjmp	.+40     	; 0x167a <LCD_WRITE_COMMAND+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1652:	6f 81       	ldd	r22, Y+7	; 0x07
    1654:	78 85       	ldd	r23, Y+8	; 0x08
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	8d 83       	std	Y+5, r24	; 0x05
    1666:	8d 81       	ldd	r24, Y+5	; 0x05
    1668:	9e 81       	ldd	r25, Y+6	; 0x06
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <LCD_WRITE_COMMAND+0x118>
    1676:	9a 83       	std	Y+2, r25	; 0x02
    1678:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8_WRITE_PIN(CONTROL_PORT, E , 0);
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	62 e0       	ldi	r22, 0x02	; 2
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8_WRITE_PIN>
}
    1684:	2f 96       	adiw	r28, 0x0f	; 15
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <LCD_CLEAR>:

void LCD_CLEAR(){
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	2e 97       	sbiw	r28, 0x0e	; 14
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
	LCD_WRITE_COMMAND(0b00000001);
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_WRITE_COMMAND>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a0 e0       	ldi	r26, 0x00	; 0
    16b6:	b0 e4       	ldi	r27, 0x40	; 64
    16b8:	8b 87       	std	Y+11, r24	; 0x0b
    16ba:	9c 87       	std	Y+12, r25	; 0x0c
    16bc:	ad 87       	std	Y+13, r26	; 0x0d
    16be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	4a ef       	ldi	r20, 0xFA	; 250
    16ce:	54 e4       	ldi	r21, 0x44	; 68
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	8f 83       	std	Y+7, r24	; 0x07
    16da:	98 87       	std	Y+8, r25	; 0x08
    16dc:	a9 87       	std	Y+9, r26	; 0x09
    16de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e8       	ldi	r20, 0x80	; 128
    16ee:	5f e3       	ldi	r21, 0x3F	; 63
    16f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f4:	88 23       	and	r24, r24
    16f6:	2c f4       	brge	.+10     	; 0x1702 <LCD_CLEAR+0x6c>
		__ticks = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	3f c0       	rjmp	.+126    	; 0x1780 <LCD_CLEAR+0xea>
	else if (__tmp > 65535)
    1702:	6f 81       	ldd	r22, Y+7	; 0x07
    1704:	78 85       	ldd	r23, Y+8	; 0x08
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	57 e4       	ldi	r21, 0x47	; 71
    1712:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	4c f5       	brge	.+82     	; 0x176c <LCD_CLEAR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171a:	6b 85       	ldd	r22, Y+11	; 0x0b
    171c:	7c 85       	ldd	r23, Y+12	; 0x0c
    171e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1720:	9e 85       	ldd	r25, Y+14	; 0x0e
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e2       	ldi	r20, 0x20	; 32
    1728:	51 e4       	ldi	r21, 0x41	; 65
    172a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <LCD_CLEAR+0xcc>
    1744:	88 ec       	ldi	r24, 0xC8	; 200
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9c 83       	std	Y+4, r25	; 0x04
    174a:	8b 83       	std	Y+3, r24	; 0x03
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <LCD_CLEAR+0xba>
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	69 f7       	brne	.-38     	; 0x1744 <LCD_CLEAR+0xae>
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <LCD_CLEAR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176c:	6f 81       	ldd	r22, Y+7	; 0x07
    176e:	78 85       	ldd	r23, Y+8	; 0x08
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9e 83       	std	Y+6, r25	; 0x06
    177e:	8d 83       	std	Y+5, r24	; 0x05
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <LCD_CLEAR+0xf6>
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1794:	2e 96       	adiw	r28, 0x0e	; 14
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <LCD_INIT>:

void LCD_INIT()
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	6c 97       	sbiw	r28, 0x1c	; 28
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61

	DIO_u8_SET_PIN(CONTROL_PORT , RS, OUTPUT);
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	41 e0       	ldi	r20, 0x01	; 1
    17c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8_SET_PIN>
	DIO_u8_SET_PIN(CONTROL_PORT , RW, OUTPUT);
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	61 e0       	ldi	r22, 0x01	; 1
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    17ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8_SET_PIN>
	DIO_u8_SET_PIN(CONTROL_PORT , E , OUTPUT);
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	62 e0       	ldi	r22, 0x02	; 2
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8_SET_PIN>

	DIO_u8_SET_PORT(DATA_PORT, PORT_OUTPUT);
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	6f ef       	ldi	r22, 0xFF	; 255
    17dc:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_u8_SET_PORT>

	//function set
	LCD_WRITE_COMMAND(0b00111000);
    17e0:	88 e3       	ldi	r24, 0x38	; 56
    17e2:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_WRITE_COMMAND>
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	a0 e8       	ldi	r26, 0x80	; 128
    17ec:	bf e3       	ldi	r27, 0x3F	; 63
    17ee:	89 8f       	std	Y+25, r24	; 0x19
    17f0:	9a 8f       	std	Y+26, r25	; 0x1a
    17f2:	ab 8f       	std	Y+27, r26	; 0x1b
    17f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f6:	69 8d       	ldd	r22, Y+25	; 0x19
    17f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	4a ef       	ldi	r20, 0xFA	; 250
    1804:	54 e4       	ldi	r21, 0x44	; 68
    1806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	8d 8b       	std	Y+21, r24	; 0x15
    1810:	9e 8b       	std	Y+22, r25	; 0x16
    1812:	af 8b       	std	Y+23, r26	; 0x17
    1814:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1816:	6d 89       	ldd	r22, Y+21	; 0x15
    1818:	7e 89       	ldd	r23, Y+22	; 0x16
    181a:	8f 89       	ldd	r24, Y+23	; 0x17
    181c:	98 8d       	ldd	r25, Y+24	; 0x18
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	40 e8       	ldi	r20, 0x80	; 128
    1824:	5f e3       	ldi	r21, 0x3F	; 63
    1826:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    182a:	88 23       	and	r24, r24
    182c:	2c f4       	brge	.+10     	; 0x1838 <LCD_INIT+0x92>
		__ticks = 1;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	9c 8b       	std	Y+20, r25	; 0x14
    1834:	8b 8b       	std	Y+19, r24	; 0x13
    1836:	3f c0       	rjmp	.+126    	; 0x18b6 <LCD_INIT+0x110>
	else if (__tmp > 65535)
    1838:	6d 89       	ldd	r22, Y+21	; 0x15
    183a:	7e 89       	ldd	r23, Y+22	; 0x16
    183c:	8f 89       	ldd	r24, Y+23	; 0x17
    183e:	98 8d       	ldd	r25, Y+24	; 0x18
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	3f ef       	ldi	r19, 0xFF	; 255
    1844:	4f e7       	ldi	r20, 0x7F	; 127
    1846:	57 e4       	ldi	r21, 0x47	; 71
    1848:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    184c:	18 16       	cp	r1, r24
    184e:	4c f5       	brge	.+82     	; 0x18a2 <LCD_INIT+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1850:	69 8d       	ldd	r22, Y+25	; 0x19
    1852:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1854:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1856:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e2       	ldi	r20, 0x20	; 32
    185e:	51 e4       	ldi	r21, 0x41	; 65
    1860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	bc 01       	movw	r22, r24
    186a:	cd 01       	movw	r24, r26
    186c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	9c 8b       	std	Y+20, r25	; 0x14
    1876:	8b 8b       	std	Y+19, r24	; 0x13
    1878:	0f c0       	rjmp	.+30     	; 0x1898 <LCD_INIT+0xf2>
    187a:	88 ec       	ldi	r24, 0xC8	; 200
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9a 8b       	std	Y+18, r25	; 0x12
    1880:	89 8b       	std	Y+17, r24	; 0x11
    1882:	89 89       	ldd	r24, Y+17	; 0x11
    1884:	9a 89       	ldd	r25, Y+18	; 0x12
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	f1 f7       	brne	.-4      	; 0x1886 <LCD_INIT+0xe0>
    188a:	9a 8b       	std	Y+18, r25	; 0x12
    188c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    188e:	8b 89       	ldd	r24, Y+19	; 0x13
    1890:	9c 89       	ldd	r25, Y+20	; 0x14
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	9c 8b       	std	Y+20, r25	; 0x14
    1896:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1898:	8b 89       	ldd	r24, Y+19	; 0x13
    189a:	9c 89       	ldd	r25, Y+20	; 0x14
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	69 f7       	brne	.-38     	; 0x187a <LCD_INIT+0xd4>
    18a0:	14 c0       	rjmp	.+40     	; 0x18ca <LCD_INIT+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a2:	6d 89       	ldd	r22, Y+21	; 0x15
    18a4:	7e 89       	ldd	r23, Y+22	; 0x16
    18a6:	8f 89       	ldd	r24, Y+23	; 0x17
    18a8:	98 8d       	ldd	r25, Y+24	; 0x18
    18aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	9c 8b       	std	Y+20, r25	; 0x14
    18b4:	8b 8b       	std	Y+19, r24	; 0x13
    18b6:	8b 89       	ldd	r24, Y+19	; 0x13
    18b8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ba:	98 8b       	std	Y+16, r25	; 0x10
    18bc:	8f 87       	std	Y+15, r24	; 0x0f
    18be:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c0:	98 89       	ldd	r25, Y+16	; 0x10
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <LCD_INIT+0x11c>
    18c6:	98 8b       	std	Y+16, r25	; 0x10
    18c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);


	//on-off control
	LCD_WRITE_COMMAND(0b00001110);
    18ca:	8e e0       	ldi	r24, 0x0E	; 14
    18cc:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_WRITE_COMMAND>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a0 e8       	ldi	r26, 0x80	; 128
    18d6:	bf e3       	ldi	r27, 0x3F	; 63
    18d8:	8b 87       	std	Y+11, r24	; 0x0b
    18da:	9c 87       	std	Y+12, r25	; 0x0c
    18dc:	ad 87       	std	Y+13, r26	; 0x0d
    18de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4a ef       	ldi	r20, 0xFA	; 250
    18ee:	54 e4       	ldi	r21, 0x44	; 68
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	8f 83       	std	Y+7, r24	; 0x07
    18fa:	98 87       	std	Y+8, r25	; 0x08
    18fc:	a9 87       	std	Y+9, r26	; 0x09
    18fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1900:	6f 81       	ldd	r22, Y+7	; 0x07
    1902:	78 85       	ldd	r23, Y+8	; 0x08
    1904:	89 85       	ldd	r24, Y+9	; 0x09
    1906:	9a 85       	ldd	r25, Y+10	; 0x0a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1914:	88 23       	and	r24, r24
    1916:	2c f4       	brge	.+10     	; 0x1922 <LCD_INIT+0x17c>
		__ticks = 1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	3f c0       	rjmp	.+126    	; 0x19a0 <LCD_INIT+0x1fa>
	else if (__tmp > 65535)
    1922:	6f 81       	ldd	r22, Y+7	; 0x07
    1924:	78 85       	ldd	r23, Y+8	; 0x08
    1926:	89 85       	ldd	r24, Y+9	; 0x09
    1928:	9a 85       	ldd	r25, Y+10	; 0x0a
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	57 e4       	ldi	r21, 0x47	; 71
    1932:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1936:	18 16       	cp	r1, r24
    1938:	4c f5       	brge	.+82     	; 0x198c <LCD_INIT+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193a:	6b 85       	ldd	r22, Y+11	; 0x0b
    193c:	7c 85       	ldd	r23, Y+12	; 0x0c
    193e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1940:	9e 85       	ldd	r25, Y+14	; 0x0e
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e2       	ldi	r20, 0x20	; 32
    1948:	51 e4       	ldi	r21, 0x41	; 65
    194a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <LCD_INIT+0x1dc>
    1964:	88 ec       	ldi	r24, 0xC8	; 200
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	8b 83       	std	Y+3, r24	; 0x03
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_INIT+0x1ca>
    1974:	9c 83       	std	Y+4, r25	; 0x04
    1976:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1982:	8d 81       	ldd	r24, Y+5	; 0x05
    1984:	9e 81       	ldd	r25, Y+6	; 0x06
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	69 f7       	brne	.-38     	; 0x1964 <LCD_INIT+0x1be>
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <LCD_INIT+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198c:	6f 81       	ldd	r22, Y+7	; 0x07
    198e:	78 85       	ldd	r23, Y+8	; 0x08
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	8d 83       	std	Y+5, r24	; 0x05
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	9e 81       	ldd	r25, Y+6	; 0x06
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <LCD_INIT+0x206>
    19b0:	9a 83       	std	Y+2, r25	; 0x02
    19b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	LCD_CLEAR();
    19b4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_CLEAR>

	//entry mood
	LCD_WRITE_COMMAND(0b00000110);
    19b8:	86 e0       	ldi	r24, 0x06	; 6
    19ba:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_WRITE_COMMAND>
}
    19be:	6c 96       	adiw	r28, 0x1c	; 28
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(u8 Data)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	2f 97       	sbiw	r28, 0x0f	; 15
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8_WRITE_PIN(CONTROL_PORT, RS , 1);
    19e6:	82 e0       	ldi	r24, 0x02	; 2
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	41 e0       	ldi	r20, 0x01	; 1
    19ec:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8_WRITE_PIN>
	DIO_u8_WRITE_PIN(CONTROL_PORT, RW , 0);
    19f0:	82 e0       	ldi	r24, 0x02	; 2
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8_WRITE_PIN>

	DIO_u8_WRITE_PORT(DATA_PORT, Data);
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    19fe:	0e 94 f9 07 	call	0xff2	; 0xff2 <DIO_u8_WRITE_PORT>


	DIO_u8_WRITE_PIN(CONTROL_PORT, E , 1);
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	62 e0       	ldi	r22, 0x02	; 2
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8_WRITE_PIN>
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	a0 e8       	ldi	r26, 0x80	; 128
    1a12:	bf e3       	ldi	r27, 0x3F	; 63
    1a14:	8b 87       	std	Y+11, r24	; 0x0b
    1a16:	9c 87       	std	Y+12, r25	; 0x0c
    1a18:	ad 87       	std	Y+13, r26	; 0x0d
    1a1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	4a ef       	ldi	r20, 0xFA	; 250
    1a2a:	54 e4       	ldi	r21, 0x44	; 68
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	8f 83       	std	Y+7, r24	; 0x07
    1a36:	98 87       	std	Y+8, r25	; 0x08
    1a38:	a9 87       	std	Y+9, r26	; 0x09
    1a3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3e:	78 85       	ldd	r23, Y+8	; 0x08
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e8       	ldi	r20, 0x80	; 128
    1a4a:	5f e3       	ldi	r21, 0x3F	; 63
    1a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a50:	88 23       	and	r24, r24
    1a52:	2c f4       	brge	.+10     	; 0x1a5e <LCD_WRITE_CHAR+0x8e>
		__ticks = 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
    1a5c:	3f c0       	rjmp	.+126    	; 0x1adc <LCD_WRITE_CHAR+0x10c>
	else if (__tmp > 65535)
    1a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a60:	78 85       	ldd	r23, Y+8	; 0x08
    1a62:	89 85       	ldd	r24, Y+9	; 0x09
    1a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	3f ef       	ldi	r19, 0xFF	; 255
    1a6a:	4f e7       	ldi	r20, 0x7F	; 127
    1a6c:	57 e4       	ldi	r21, 0x47	; 71
    1a6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a72:	18 16       	cp	r1, r24
    1a74:	4c f5       	brge	.+82     	; 0x1ac8 <LCD_WRITE_CHAR+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	0f c0       	rjmp	.+30     	; 0x1abe <LCD_WRITE_CHAR+0xee>
    1aa0:	88 ec       	ldi	r24, 0xC8	; 200
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9c 83       	std	Y+4, r25	; 0x04
    1aa6:	8b 83       	std	Y+3, r24	; 0x03
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <LCD_WRITE_CHAR+0xdc>
    1ab0:	9c 83       	std	Y+4, r25	; 0x04
    1ab2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	69 f7       	brne	.-38     	; 0x1aa0 <LCD_WRITE_CHAR+0xd0>
    1ac6:	14 c0       	rjmp	.+40     	; 0x1af0 <LCD_WRITE_CHAR+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aca:	78 85       	ldd	r23, Y+8	; 0x08
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	8d 83       	std	Y+5, r24	; 0x05
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	9a 83       	std	Y+2, r25	; 0x02
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <LCD_WRITE_CHAR+0x118>
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8_WRITE_PIN(CONTROL_PORT, E , 0);
    1af0:	82 e0       	ldi	r24, 0x02	; 2
    1af2:	62 e0       	ldi	r22, 0x02	; 2
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8_WRITE_PIN>
}
    1afa:	2f 96       	adiw	r28, 0x0f	; 15
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(u8 * Str)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <LCD_WRITE_STRING+0x6>
    1b12:	0f 92       	push	r0
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	9b 83       	std	Y+3, r25	; 0x03
    1b1a:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0 ; Str[i] != '\0'; i++)
    1b1c:	19 82       	std	Y+1, r1	; 0x01
    1b1e:	0e c0       	rjmp	.+28     	; 0x1b3c <LCD_WRITE_STRING+0x30>
	{
		LCD_WRITE_CHAR(Str[i]);
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	e2 0f       	add	r30, r18
    1b2e:	f3 1f       	adc	r31, r19
    1b30:	80 81       	ld	r24, Z
    1b32:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LCD_WRITE_CHAR>
	DIO_u8_WRITE_PIN(CONTROL_PORT, E , 0);
}

void LCD_WRITE_STRING(u8 * Str)
{
	for(u8 i=0 ; Str[i] != '\0'; i++)
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	8f 5f       	subi	r24, 0xFF	; 255
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	9b 81       	ldd	r25, Y+3	; 0x03
    1b46:	fc 01       	movw	r30, r24
    1b48:	e2 0f       	add	r30, r18
    1b4a:	f3 1f       	adc	r31, r19
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 23       	and	r24, r24
    1b50:	39 f7       	brne	.-50     	; 0x1b20 <LCD_WRITE_STRING+0x14>
	{
		LCD_WRITE_CHAR(Str[i]);
	}
}
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <LCD_GOTO>:

// setting position of display cursor in DDRAM
void LCD_GOTO(u8 x, u8 y)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <LCD_GOTO+0x6>
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	6a 83       	std	Y+2, r22	; 0x02
	LCD_WRITE_COMMAND(128+ y*0x40 + x);
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	02 96       	adiw	r24, 0x02	; 2
    1b74:	00 24       	eor	r0, r0
    1b76:	96 95       	lsr	r25
    1b78:	87 95       	ror	r24
    1b7a:	07 94       	ror	r0
    1b7c:	96 95       	lsr	r25
    1b7e:	87 95       	ror	r24
    1b80:	07 94       	ror	r0
    1b82:	98 2f       	mov	r25, r24
    1b84:	80 2d       	mov	r24, r0
    1b86:	98 2f       	mov	r25, r24
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	89 0f       	add	r24, r25
    1b8c:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_WRITE_COMMAND>
}
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <LCD_SHIFT>:

void LCD_SHIFT(u8 Direction)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <LCD_SHIFT+0x6>
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	89 83       	std	Y+1, r24	; 0x01

	switch(Direction){
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	3b 83       	std	Y+3, r19	; 0x03
    1bb0:	2a 83       	std	Y+2, r18	; 0x02
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	31 f0       	breq	.+12     	; 0x1bc6 <LCD_SHIFT+0x2c>
    1bba:	2a 81       	ldd	r18, Y+2	; 0x02
    1bbc:	3b 81       	ldd	r19, Y+3	; 0x03
    1bbe:	21 30       	cpi	r18, 0x01	; 1
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	29 f0       	breq	.+10     	; 0x1bce <LCD_SHIFT+0x34>
    1bc4:	07 c0       	rjmp	.+14     	; 0x1bd4 <LCD_SHIFT+0x3a>
	case LEFT:
		LCD_WRITE_COMMAND(0b00011000);
    1bc6:	88 e1       	ldi	r24, 0x18	; 24
    1bc8:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_WRITE_COMMAND>
    1bcc:	03 c0       	rjmp	.+6      	; 0x1bd4 <LCD_SHIFT+0x3a>
		break;
	case RIGHT:
		LCD_WRITE_COMMAND(0b00011100);
    1bce:	8c e1       	ldi	r24, 0x1C	; 28
    1bd0:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_WRITE_COMMAND>
		break;
	}

}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <LCD_WRITE_INT>:

void LCD_WRITE_INT(u16 integer){
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	2a 97       	sbiw	r28, 0x0a	; 10
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	9a 87       	std	Y+10, r25	; 0x0a
    1bf6:	89 87       	std	Y+9, r24	; 0x09
	u8 arr[8];
	intToString(integer, arr);
    1bf8:	89 85       	ldd	r24, Y+9	; 0x09
    1bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfc:	9e 01       	movw	r18, r28
    1bfe:	2f 5f       	subi	r18, 0xFF	; 255
    1c00:	3f 4f       	sbci	r19, 0xFF	; 255
    1c02:	b9 01       	movw	r22, r18
    1c04:	0e 94 1a 0a 	call	0x1434	; 0x1434 <intToString>
	LCD_WRITE_STRING(arr);
    1c08:	ce 01       	movw	r24, r28
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_WRITE_STRING>
}
    1c10:	2a 96       	adiw	r28, 0x0a	; 10
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <TIMER_0_INIT>:



//timer 0
void TIMER_0_INIT(u8 mood , u8 prescaler)
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <TIMER_0_INIT+0x6>
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <TIMER_0_INIT+0x8>
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	6a 83       	std	Y+2, r22	; 0x02
	TCCR0 = 0b00000000 | mood  | prescaler;
    1c32:	e3 e5       	ldi	r30, 0x53	; 83
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	99 81       	ldd	r25, Y+1	; 0x01
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	89 2b       	or	r24, r25
    1c3c:	80 83       	st	Z, r24

	switch(mood){
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	3c 83       	std	Y+4, r19	; 0x04
    1c46:	2b 83       	std	Y+3, r18	; 0x03
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	31 f0       	breq	.+12     	; 0x1c5c <TIMER_0_INIT+0x3a>
    1c50:	2b 81       	ldd	r18, Y+3	; 0x03
    1c52:	3c 81       	ldd	r19, Y+4	; 0x04
    1c54:	28 30       	cpi	r18, 0x08	; 8
    1c56:	31 05       	cpc	r19, r1
    1c58:	81 f0       	breq	.+32     	; 0x1c7a <TIMER_0_INIT+0x58>
    1c5a:	1e c0       	rjmp	.+60     	; 0x1c98 <TIMER_0_INIT+0x76>
	case NORMAL_0:
		SET_BIT(TIMSK,0);
    1c5c:	a9 e5       	ldi	r26, 0x59	; 89
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e9 e5       	ldi	r30, 0x59	; 89
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	81 60       	ori	r24, 0x01	; 1
    1c68:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,1);
    1c6a:	a9 e5       	ldi	r26, 0x59	; 89
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e9 e5       	ldi	r30, 0x59	; 89
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8d 7f       	andi	r24, 0xFD	; 253
    1c76:	8c 93       	st	X, r24
    1c78:	24 c0       	rjmp	.+72     	; 0x1cc2 <TIMER_0_INIT+0xa0>
		break;
	case CTC_0:
		CLEAR_BIT(TIMSK,0);
    1c7a:	a9 e5       	ldi	r26, 0x59	; 89
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e9 e5       	ldi	r30, 0x59	; 89
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	8e 7f       	andi	r24, 0xFE	; 254
    1c86:	8c 93       	st	X, r24
		SET_BIT(TIMSK,1);
    1c88:	a9 e5       	ldi	r26, 0x59	; 89
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e9 e5       	ldi	r30, 0x59	; 89
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	82 60       	ori	r24, 0x02	; 2
    1c94:	8c 93       	st	X, r24
    1c96:	15 c0       	rjmp	.+42     	; 0x1cc2 <TIMER_0_INIT+0xa0>

		break;
	default:
		CLEAR_BIT(TIMSK,0);
    1c98:	a9 e5       	ldi	r26, 0x59	; 89
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e9 e5       	ldi	r30, 0x59	; 89
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	8e 7f       	andi	r24, 0xFE	; 254
    1ca4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,1);// turn off interrupt
    1ca6:	a9 e5       	ldi	r26, 0x59	; 89
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e9 e5       	ldi	r30, 0x59	; 89
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	8d 7f       	andi	r24, 0xFD	; 253
    1cb2:	8c 93       	st	X, r24
		TCCR0 |= 0b0100000; // set pwm mood to clear on OC0 compare
    1cb4:	a3 e5       	ldi	r26, 0x53	; 83
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e3 e5       	ldi	r30, 0x53	; 83
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	80 62       	ori	r24, 0x20	; 32
    1cc0:	8c 93       	st	X, r24
		break;
	}
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <TIMER_0_SET_INIT>:
void TIMER_0_SET_INIT(u8 initial_time)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	0f 92       	push	r0
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = initial_time;
    1cdc:	e2 e5       	ldi	r30, 0x52	; 82
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	80 83       	st	Z, r24
}
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <TIMER_0_SET_COMPARE>:
void TIMER_0_SET_COMPARE(u8 compare_time)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = compare_time;
    1cf8:	ec e5       	ldi	r30, 0x5C	; 92
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	80 83       	st	Z, r24
}
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <TIMER_0_GET_TCNT>:
u8 TIMER_0_GET_TCNT(){
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1d10:	e2 e5       	ldi	r30, 0x52	; 82
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
}
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <TIMER_1_SET_INT_EDGE>:

//timer 1

void TIMER_1_SET_INT_EDGE(u8 edge){
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <TIMER_1_SET_INT_EDGE+0x6>
    1d22:	0f 92       	push	r0
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	89 83       	std	Y+1, r24	; 0x01
	switch(edge){
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	3b 83       	std	Y+3, r19	; 0x03
    1d32:	2a 83       	std	Y+2, r18	; 0x02
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	9b 81       	ldd	r25, Y+3	; 0x03
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	31 f0       	breq	.+12     	; 0x1d48 <TIMER_1_SET_INT_EDGE+0x2c>
    1d3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d40:	21 30       	cpi	r18, 0x01	; 1
    1d42:	31 05       	cpc	r19, r1
    1d44:	49 f0       	breq	.+18     	; 0x1d58 <TIMER_1_SET_INT_EDGE+0x3c>
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <TIMER_1_SET_INT_EDGE+0x4a>
	case RISE:
		SET_BIT(TCCR1B,6);
    1d48:	ae e4       	ldi	r26, 0x4E	; 78
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	ee e4       	ldi	r30, 0x4E	; 78
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	80 64       	ori	r24, 0x40	; 64
    1d54:	8c 93       	st	X, r24
    1d56:	07 c0       	rjmp	.+14     	; 0x1d66 <TIMER_1_SET_INT_EDGE+0x4a>
		break;
	case  FALL:
		CLEAR_BIT(TCCR1B,6);
    1d58:	ae e4       	ldi	r26, 0x4E	; 78
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	ee e4       	ldi	r30, 0x4E	; 78
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	8f 7b       	andi	r24, 0xBF	; 191
    1d64:	8c 93       	st	X, r24
		break;
	}
}
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <TIMER_1_INIT>:
void TIMER_1_INIT(u8 mood, u8 prescaler , u8 channel)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	27 97       	sbiw	r28, 0x07	; 7
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	6a 83       	std	Y+2, r22	; 0x02
    1d8a:	4b 83       	std	Y+3, r20	; 0x03
		switch(mood){
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	3f 83       	std	Y+7, r19	; 0x07
    1d94:	2e 83       	std	Y+6, r18	; 0x06
    1d96:	8e 81       	ldd	r24, Y+6	; 0x06
    1d98:	9f 81       	ldd	r25, Y+7	; 0x07
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	31 f0       	breq	.+12     	; 0x1daa <TIMER_1_INIT+0x38>
    1d9e:	2e 81       	ldd	r18, Y+6	; 0x06
    1da0:	3f 81       	ldd	r19, Y+7	; 0x07
    1da2:	21 30       	cpi	r18, 0x01	; 1
    1da4:	31 05       	cpc	r19, r1
    1da6:	59 f1       	breq	.+86     	; 0x1dfe <TIMER_1_INIT+0x8c>
    1da8:	63 c0       	rjmp	.+198    	; 0x1e70 <TIMER_1_INIT+0xfe>
			case NORMAL_1:
				//common
				// wgm13-10 = 0000
				// cs12-10 = prescaler
				// TCCR1B is same for every case
				TCCR1B = 0b00000000 | prescaler;
    1daa:	ee e4       	ldi	r30, 0x4E	; 78
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	80 83       	st	Z, r24
				TIMER_1_SET_INT_EDGE(FALL);
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <TIMER_1_SET_INT_EDGE>
				TCCR1A |= 0b00000000;
    1db8:	af e4       	ldi	r26, 0x4F	; 79
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	ef e4       	ldi	r30, 0x4F	; 79
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8c 93       	st	X, r24

				SET_BIT(TIMSK, 2);
    1dc4:	a9 e5       	ldi	r26, 0x59	; 89
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e9 e5       	ldi	r30, 0x59	; 89
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	84 60       	ori	r24, 0x04	; 4
    1dd0:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,3);
    1dd2:	a9 e5       	ldi	r26, 0x59	; 89
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e9 e5       	ldi	r30, 0x59	; 89
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	87 7f       	andi	r24, 0xF7	; 247
    1dde:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,4);
    1de0:	a9 e5       	ldi	r26, 0x59	; 89
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e9 e5       	ldi	r30, 0x59	; 89
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	8f 7e       	andi	r24, 0xEF	; 239
    1dec:	8c 93       	st	X, r24
				SET_BIT(TIMSK, 5);
    1dee:	a9 e5       	ldi	r26, 0x59	; 89
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e9 e5       	ldi	r30, 0x59	; 89
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	80 62       	ori	r24, 0x20	; 32
    1dfa:	8c 93       	st	X, r24
    1dfc:	39 c0       	rjmp	.+114    	; 0x1e70 <TIMER_1_INIT+0xfe>
				break;

			case F_PWM_1:
				// disable interrupt if enabled
				CLEAR_BIT(TIMSK, 2);
    1dfe:	a9 e5       	ldi	r26, 0x59	; 89
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e9 e5       	ldi	r30, 0x59	; 89
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	8b 7f       	andi	r24, 0xFB	; 251
    1e0a:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,3);
    1e0c:	a9 e5       	ldi	r26, 0x59	; 89
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e9 e5       	ldi	r30, 0x59	; 89
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	87 7f       	andi	r24, 0xF7	; 247
    1e18:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,4);
    1e1a:	a9 e5       	ldi	r26, 0x59	; 89
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e9 e5       	ldi	r30, 0x59	; 89
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	8f 7e       	andi	r24, 0xEF	; 239
    1e26:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, 5);
    1e28:	a9 e5       	ldi	r26, 0x59	; 89
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e9 e5       	ldi	r30, 0x59	; 89
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	8f 7d       	andi	r24, 0xDF	; 223
    1e34:	8c 93       	st	X, r24

				TCCR1B = 0b00011000 | prescaler;
    1e36:	ee e4       	ldi	r30, 0x4E	; 78
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	88 61       	ori	r24, 0x18	; 24
    1e3e:	80 83       	st	Z, r24
				//common
				// wgm13-10 = 1110

				switch(channel){
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	3d 83       	std	Y+5, r19	; 0x05
    1e48:	2c 83       	std	Y+4, r18	; 0x04
    1e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	31 f0       	breq	.+12     	; 0x1e5e <TIMER_1_INIT+0xec>
    1e52:	2c 81       	ldd	r18, Y+4	; 0x04
    1e54:	3d 81       	ldd	r19, Y+5	; 0x05
    1e56:	21 30       	cpi	r18, 0x01	; 1
    1e58:	31 05       	cpc	r19, r1
    1e5a:	31 f0       	breq	.+12     	; 0x1e68 <TIMER_1_INIT+0xf6>
    1e5c:	09 c0       	rjmp	.+18     	; 0x1e70 <TIMER_1_INIT+0xfe>
					case CHANNEL_A:
						TCCR1A = 0b10000000 | 0b00000010;
    1e5e:	ef e4       	ldi	r30, 0x4F	; 79
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	82 e8       	ldi	r24, 0x82	; 130
    1e64:	80 83       	st	Z, r24
    1e66:	04 c0       	rjmp	.+8      	; 0x1e70 <TIMER_1_INIT+0xfe>
						break;
					case CHANNEL_B:
						TCCR1A = 0b00100000 | 0b00000010;
    1e68:	ef e4       	ldi	r30, 0x4F	; 79
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	82 e2       	ldi	r24, 0x22	; 34
    1e6e:	80 83       	st	Z, r24
				}
				break;
			}
}
    1e70:	27 96       	adiw	r28, 0x07	; 7
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <TIMER_1_SET_COMPARE>:

void TIMER_1_SET_COMPARE(u8 channel,u16 compare_value)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <TIMER_1_SET_COMPARE+0x6>
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <TIMER_1_SET_COMPARE+0x8>
    1e8a:	0f 92       	push	r0
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	7b 83       	std	Y+3, r23	; 0x03
    1e94:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel){
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	3d 83       	std	Y+5, r19	; 0x05
    1e9e:	2c 83       	std	Y+4, r18	; 0x04
    1ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	31 f0       	breq	.+12     	; 0x1eb4 <TIMER_1_SET_COMPARE+0x32>
    1ea8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eaa:	3d 81       	ldd	r19, Y+5	; 0x05
    1eac:	21 30       	cpi	r18, 0x01	; 1
    1eae:	31 05       	cpc	r19, r1
    1eb0:	41 f0       	breq	.+16     	; 0x1ec2 <TIMER_1_SET_COMPARE+0x40>
    1eb2:	0d c0       	rjmp	.+26     	; 0x1ece <TIMER_1_SET_COMPARE+0x4c>
	case CHANNEL_A:
		OCR1A = compare_value;
    1eb4:	ea e4       	ldi	r30, 0x4A	; 74
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebc:	91 83       	std	Z+1, r25	; 0x01
    1ebe:	80 83       	st	Z, r24
    1ec0:	06 c0       	rjmp	.+12     	; 0x1ece <TIMER_1_SET_COMPARE+0x4c>
		break;
	case CHANNEL_B:
		OCR1B= compare_value;
    1ec2:	e8 e4       	ldi	r30, 0x48	; 72
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	80 83       	st	Z, r24
	}
}
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <TIMER_1_SET_ICR>:

void TIMER_1_SET_ICR(u16 icr_value)
{
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <TIMER_1_SET_ICR+0x6>
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	9a 83       	std	Y+2, r25	; 0x02
    1eea:	89 83       	std	Y+1, r24	; 0x01
	ICR1=icr_value;
    1eec:	e6 e4       	ldi	r30, 0x46	; 70
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <TIMER_1_GET_ICR>:

u16 TIMER_1_GET_ICR(){
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1f0a:	e6 e4       	ldi	r30, 0x46	; 70
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	91 81       	ldd	r25, Z+1	; 0x01
}
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <main>:
u8 last_sec_screen=10;
u8 last_min_screen=10;

u8 state=0;

void main(){
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62

	INTERRUPT_GIE_ENABLE();
    1f20:	0e 94 20 09 	call	0x1240	; 0x1240 <INTERRUPT_GIE_ENABLE>
	LCD_INIT();
    1f24:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_INIT>

	DIO_u8_SET_PIN(PORTD, PIN2, INPUT);
    1f28:	83 e0       	ldi	r24, 0x03	; 3
    1f2a:	62 e0       	ldi	r22, 0x02	; 2
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8_SET_PIN>
	DIO_u8_SET_PIN(PORTD, PIN3, INPUT);
    1f32:	83 e0       	ldi	r24, 0x03	; 3
    1f34:	63 e0       	ldi	r22, 0x03	; 3
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8_SET_PIN>
	DIO_u8_SET_PIN(PORTB, PIN2, INPUT);
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	62 e0       	ldi	r22, 0x02	; 2
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8_SET_PIN>

	DIO_u8_WRITE_PIN(PORTD, PIN2, HIGH);
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	62 e0       	ldi	r22, 0x02	; 2
    1f4a:	41 e0       	ldi	r20, 0x01	; 1
    1f4c:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8_WRITE_PIN>
	DIO_u8_WRITE_PIN(PORTD, PIN3, HIGH);
    1f50:	83 e0       	ldi	r24, 0x03	; 3
    1f52:	63 e0       	ldi	r22, 0x03	; 3
    1f54:	41 e0       	ldi	r20, 0x01	; 1
    1f56:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8_WRITE_PIN>
	DIO_u8_WRITE_PIN(PORTB, PIN2, HIGH);
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	62 e0       	ldi	r22, 0x02	; 2
    1f5e:	41 e0       	ldi	r20, 0x01	; 1
    1f60:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8_WRITE_PIN>

	INTERRUPT_INIT(INTERRUPT_PIN_0 , MOOD_FALL);
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	0e 94 3c 09 	call	0x1278	; 0x1278 <INTERRUPT_INIT>
	INTERRUPT_INIT(INTERRUPT_PIN_1 , MOOD_FALL);
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	0e 94 3c 09 	call	0x1278	; 0x1278 <INTERRUPT_INIT>
	INTERRUPT_INIT(INTERRUPT_PIN_2 , MOOD_FALL);
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	60 e0       	ldi	r22, 0x00	; 0
    1f78:	0e 94 3c 09 	call	0x1278	; 0x1278 <INTERRUPT_INIT>

	while(1){

		if(counter == 4000){
    1f7c:	80 91 6e 00 	lds	r24, 0x006E
    1f80:	90 91 6f 00 	lds	r25, 0x006F
    1f84:	2f e0       	ldi	r18, 0x0F	; 15
    1f86:	80 3a       	cpi	r24, 0xA0	; 160
    1f88:	92 07       	cpc	r25, r18
    1f8a:	a1 f4       	brne	.+40     	; 0x1fb4 <main+0x9c>

			seconds++;
    1f8c:	80 91 72 00 	lds	r24, 0x0072
    1f90:	8f 5f       	subi	r24, 0xFF	; 255
    1f92:	80 93 72 00 	sts	0x0072, r24
			if(seconds ==60){
    1f96:	80 91 72 00 	lds	r24, 0x0072
    1f9a:	8c 33       	cpi	r24, 0x3C	; 60
    1f9c:	39 f4       	brne	.+14     	; 0x1fac <main+0x94>
				seconds=0;
    1f9e:	10 92 72 00 	sts	0x0072, r1
				minutes++;
    1fa2:	80 91 71 00 	lds	r24, 0x0071
    1fa6:	8f 5f       	subi	r24, 0xFF	; 255
    1fa8:	80 93 71 00 	sts	0x0071, r24
			}
			counter=0;
    1fac:	10 92 6f 00 	sts	0x006F, r1
    1fb0:	10 92 6e 00 	sts	0x006E, r1
		}

		// check for change
		if(last_sec_screen != seconds || last_min_screen != minutes){
    1fb4:	90 91 6c 00 	lds	r25, 0x006C
    1fb8:	80 91 72 00 	lds	r24, 0x0072
    1fbc:	98 17       	cp	r25, r24
    1fbe:	31 f4       	brne	.+12     	; 0x1fcc <main+0xb4>
    1fc0:	90 91 6d 00 	lds	r25, 0x006D
    1fc4:	80 91 71 00 	lds	r24, 0x0071
    1fc8:	98 17       	cp	r25, r24
    1fca:	c1 f2       	breq	.-80     	; 0x1f7c <main+0x64>
			LCD_CLEAR();
    1fcc:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_CLEAR>

			LCD_WRITE_INT(minutes);
    1fd0:	80 91 71 00 	lds	r24, 0x0071
    1fd4:	88 2f       	mov	r24, r24
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LCD_WRITE_INT>
			LCD_WRITE_STRING(" - ");
    1fdc:	80 e6       	ldi	r24, 0x60	; 96
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_WRITE_STRING>
			LCD_WRITE_INT(seconds);
    1fe4:	80 91 72 00 	lds	r24, 0x0072
    1fe8:	88 2f       	mov	r24, r24
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LCD_WRITE_INT>

			last_sec_screen=seconds;
    1ff0:	80 91 72 00 	lds	r24, 0x0072
    1ff4:	80 93 6c 00 	sts	0x006C, r24
			last_min_screen=minutes;
    1ff8:	80 91 71 00 	lds	r24, 0x0071
    1ffc:	80 93 6d 00 	sts	0x006D, r24
    2000:	bd cf       	rjmp	.-134    	; 0x1f7c <main+0x64>

00002002 <__vector_1>:
		}
	}
}
// start/resume
ISR(INT0){
    2002:	1f 92       	push	r1
    2004:	0f 92       	push	r0
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	0f 92       	push	r0
    200a:	11 24       	eor	r1, r1
    200c:	2f 93       	push	r18
    200e:	3f 93       	push	r19
    2010:	4f 93       	push	r20
    2012:	5f 93       	push	r21
    2014:	6f 93       	push	r22
    2016:	7f 93       	push	r23
    2018:	8f 93       	push	r24
    201a:	9f 93       	push	r25
    201c:	af 93       	push	r26
    201e:	bf 93       	push	r27
    2020:	ef 93       	push	r30
    2022:	ff 93       	push	r31
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
	TIMER_0_SET_INIT(last_stop);
    202c:	80 91 70 00 	lds	r24, 0x0070
    2030:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <TIMER_0_SET_INIT>
	TIMER_0_SET_COMPARE(250);
    2034:	8a ef       	ldi	r24, 0xFA	; 250
    2036:	0e 94 76 0e 	call	0x1cec	; 0x1cec <TIMER_0_SET_COMPARE>

	TIMER_0_INIT(CTC_0, PRE_8);
    203a:	88 e0       	ldi	r24, 0x08	; 8
    203c:	62 e0       	ldi	r22, 0x02	; 2
    203e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <TIMER_0_INIT>
	state=1;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	80 93 73 00 	sts	0x0073, r24
}
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	ff 91       	pop	r31
    204e:	ef 91       	pop	r30
    2050:	bf 91       	pop	r27
    2052:	af 91       	pop	r26
    2054:	9f 91       	pop	r25
    2056:	8f 91       	pop	r24
    2058:	7f 91       	pop	r23
    205a:	6f 91       	pop	r22
    205c:	5f 91       	pop	r21
    205e:	4f 91       	pop	r20
    2060:	3f 91       	pop	r19
    2062:	2f 91       	pop	r18
    2064:	0f 90       	pop	r0
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	0f 90       	pop	r0
    206a:	1f 90       	pop	r1
    206c:	18 95       	reti

0000206e <__vector_10>:

ISR(TIMER_0_COMP){
    206e:	1f 92       	push	r1
    2070:	0f 92       	push	r0
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	0f 92       	push	r0
    2076:	11 24       	eor	r1, r1
    2078:	8f 93       	push	r24
    207a:	9f 93       	push	r25
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
	switch(state){
    2084:	80 91 73 00 	lds	r24, 0x0073
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	81 30       	cpi	r24, 0x01	; 1
    208e:	91 05       	cpc	r25, r1
    2090:	49 f4       	brne	.+18     	; 0x20a4 <__vector_10+0x36>
	case 1:
		// start /  resume
		counter++;
    2092:	80 91 6e 00 	lds	r24, 0x006E
    2096:	90 91 6f 00 	lds	r25, 0x006F
    209a:	01 96       	adiw	r24, 0x01	; 1
    209c:	90 93 6f 00 	sts	0x006F, r25
    20a0:	80 93 6e 00 	sts	0x006E, r24
	default:
		break;

	}

}
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	9f 91       	pop	r25
    20aa:	8f 91       	pop	r24
    20ac:	0f 90       	pop	r0
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	0f 90       	pop	r0
    20b2:	1f 90       	pop	r1
    20b4:	18 95       	reti

000020b6 <__vector_2>:

// stop
ISR(INT1){
    20b6:	1f 92       	push	r1
    20b8:	0f 92       	push	r0
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	0f 92       	push	r0
    20be:	11 24       	eor	r1, r1
    20c0:	2f 93       	push	r18
    20c2:	3f 93       	push	r19
    20c4:	4f 93       	push	r20
    20c6:	5f 93       	push	r21
    20c8:	6f 93       	push	r22
    20ca:	7f 93       	push	r23
    20cc:	8f 93       	push	r24
    20ce:	9f 93       	push	r25
    20d0:	af 93       	push	r26
    20d2:	bf 93       	push	r27
    20d4:	ef 93       	push	r30
    20d6:	ff 93       	push	r31
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
	state=0;
    20e0:	10 92 73 00 	sts	0x0073, r1
	last_stop=TIMER_0_GET_TCNT();
    20e4:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <TIMER_0_GET_TCNT>
    20e8:	80 93 70 00 	sts	0x0070, r24
}
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	ff 91       	pop	r31
    20f2:	ef 91       	pop	r30
    20f4:	bf 91       	pop	r27
    20f6:	af 91       	pop	r26
    20f8:	9f 91       	pop	r25
    20fa:	8f 91       	pop	r24
    20fc:	7f 91       	pop	r23
    20fe:	6f 91       	pop	r22
    2100:	5f 91       	pop	r21
    2102:	4f 91       	pop	r20
    2104:	3f 91       	pop	r19
    2106:	2f 91       	pop	r18
    2108:	0f 90       	pop	r0
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	0f 90       	pop	r0
    210e:	1f 90       	pop	r1
    2110:	18 95       	reti

00002112 <__vector_3>:
// reset
ISR(INT2){
    2112:	1f 92       	push	r1
    2114:	0f 92       	push	r0
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	0f 92       	push	r0
    211a:	11 24       	eor	r1, r1
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
	state=0;
    2124:	10 92 73 00 	sts	0x0073, r1

	last_stop=0;
    2128:	10 92 70 00 	sts	0x0070, r1
	counter=0;
    212c:	10 92 6f 00 	sts	0x006F, r1
    2130:	10 92 6e 00 	sts	0x006E, r1
	minutes=0;
    2134:	10 92 71 00 	sts	0x0071, r1
	seconds=0;
    2138:	10 92 72 00 	sts	0x0072, r1

}
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	0f 90       	pop	r0
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	0f 90       	pop	r0
    2146:	1f 90       	pop	r1
    2148:	18 95       	reti

0000214a <__divmodhi4>:
    214a:	97 fb       	bst	r25, 7
    214c:	09 2e       	mov	r0, r25
    214e:	07 26       	eor	r0, r23
    2150:	0a d0       	rcall	.+20     	; 0x2166 <__divmodhi4_neg1>
    2152:	77 fd       	sbrc	r23, 7
    2154:	04 d0       	rcall	.+8      	; 0x215e <__divmodhi4_neg2>
    2156:	0c d0       	rcall	.+24     	; 0x2170 <__udivmodhi4>
    2158:	06 d0       	rcall	.+12     	; 0x2166 <__divmodhi4_neg1>
    215a:	00 20       	and	r0, r0
    215c:	1a f4       	brpl	.+6      	; 0x2164 <__divmodhi4_exit>

0000215e <__divmodhi4_neg2>:
    215e:	70 95       	com	r23
    2160:	61 95       	neg	r22
    2162:	7f 4f       	sbci	r23, 0xFF	; 255

00002164 <__divmodhi4_exit>:
    2164:	08 95       	ret

00002166 <__divmodhi4_neg1>:
    2166:	f6 f7       	brtc	.-4      	; 0x2164 <__divmodhi4_exit>
    2168:	90 95       	com	r25
    216a:	81 95       	neg	r24
    216c:	9f 4f       	sbci	r25, 0xFF	; 255
    216e:	08 95       	ret

00002170 <__udivmodhi4>:
    2170:	aa 1b       	sub	r26, r26
    2172:	bb 1b       	sub	r27, r27
    2174:	51 e1       	ldi	r21, 0x11	; 17
    2176:	07 c0       	rjmp	.+14     	; 0x2186 <__udivmodhi4_ep>

00002178 <__udivmodhi4_loop>:
    2178:	aa 1f       	adc	r26, r26
    217a:	bb 1f       	adc	r27, r27
    217c:	a6 17       	cp	r26, r22
    217e:	b7 07       	cpc	r27, r23
    2180:	10 f0       	brcs	.+4      	; 0x2186 <__udivmodhi4_ep>
    2182:	a6 1b       	sub	r26, r22
    2184:	b7 0b       	sbc	r27, r23

00002186 <__udivmodhi4_ep>:
    2186:	88 1f       	adc	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	5a 95       	dec	r21
    218c:	a9 f7       	brne	.-22     	; 0x2178 <__udivmodhi4_loop>
    218e:	80 95       	com	r24
    2190:	90 95       	com	r25
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	08 95       	ret

00002198 <__prologue_saves__>:
    2198:	2f 92       	push	r2
    219a:	3f 92       	push	r3
    219c:	4f 92       	push	r4
    219e:	5f 92       	push	r5
    21a0:	6f 92       	push	r6
    21a2:	7f 92       	push	r7
    21a4:	8f 92       	push	r8
    21a6:	9f 92       	push	r9
    21a8:	af 92       	push	r10
    21aa:	bf 92       	push	r11
    21ac:	cf 92       	push	r12
    21ae:	df 92       	push	r13
    21b0:	ef 92       	push	r14
    21b2:	ff 92       	push	r15
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	ca 1b       	sub	r28, r26
    21c2:	db 0b       	sbc	r29, r27
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	09 94       	ijmp

000021d0 <__epilogue_restores__>:
    21d0:	2a 88       	ldd	r2, Y+18	; 0x12
    21d2:	39 88       	ldd	r3, Y+17	; 0x11
    21d4:	48 88       	ldd	r4, Y+16	; 0x10
    21d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    21d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    21da:	7d 84       	ldd	r7, Y+13	; 0x0d
    21dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    21de:	9b 84       	ldd	r9, Y+11	; 0x0b
    21e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    21e2:	b9 84       	ldd	r11, Y+9	; 0x09
    21e4:	c8 84       	ldd	r12, Y+8	; 0x08
    21e6:	df 80       	ldd	r13, Y+7	; 0x07
    21e8:	ee 80       	ldd	r14, Y+6	; 0x06
    21ea:	fd 80       	ldd	r15, Y+5	; 0x05
    21ec:	0c 81       	ldd	r16, Y+4	; 0x04
    21ee:	1b 81       	ldd	r17, Y+3	; 0x03
    21f0:	aa 81       	ldd	r26, Y+2	; 0x02
    21f2:	b9 81       	ldd	r27, Y+1	; 0x01
    21f4:	ce 0f       	add	r28, r30
    21f6:	d1 1d       	adc	r29, r1
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	ed 01       	movw	r28, r26
    2204:	08 95       	ret

00002206 <_exit>:
    2206:	f8 94       	cli

00002208 <__stop_program>:
    2208:	ff cf       	rjmp	.-2      	; 0x2208 <__stop_program>
